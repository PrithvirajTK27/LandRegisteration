{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar textEncoder = new TextEncoder();\nvar maxInt32 = Math.pow(2, 32);\nvar maxUInt32 = Math.pow(2, 31);\n\nfunction encodeLink(link, bytes) {\n  var i = bytes.length;\n\n  if (typeof link.Tsize === 'number') {\n    if (link.Tsize < 0) {\n      throw new Error('Tsize cannot be negative');\n    }\n\n    if (!Number.isSafeInteger(link.Tsize)) {\n      throw new Error('Tsize too large for encoding');\n    }\n\n    i = encodeVarint(bytes, i, link.Tsize) - 1;\n    bytes[i] = 24;\n  }\n\n  if (typeof link.Name === 'string') {\n    var nameBytes = textEncoder.encode(link.Name);\n    i -= nameBytes.length;\n    bytes.set(nameBytes, i);\n    i = encodeVarint(bytes, i, nameBytes.length) - 1;\n    bytes[i] = 18;\n  }\n\n  if (link.Hash) {\n    i -= link.Hash.length;\n    bytes.set(link.Hash, i);\n    i = encodeVarint(bytes, i, link.Hash.length) - 1;\n    bytes[i] = 10;\n  }\n\n  return bytes.length - i;\n}\n\nfunction encodeNode(node) {\n  var size = sizeNode(node);\n  var bytes = new Uint8Array(size);\n  var i = size;\n\n  if (node.Data) {\n    i -= node.Data.length;\n    bytes.set(node.Data, i);\n    i = encodeVarint(bytes, i, node.Data.length) - 1;\n    bytes[i] = 10;\n  }\n\n  if (node.Links) {\n    for (var index = node.Links.length - 1; index >= 0; index--) {\n      var _size = encodeLink(node.Links[index], bytes.subarray(0, i));\n\n      i -= _size;\n      i = encodeVarint(bytes, i, _size) - 1;\n      bytes[i] = 18;\n    }\n  }\n\n  return bytes;\n}\n\nfunction sizeLink(link) {\n  var n = 0;\n\n  if (link.Hash) {\n    var l = link.Hash.length;\n    n += 1 + l + sov(l);\n  }\n\n  if (typeof link.Name === 'string') {\n    var _l = textEncoder.encode(link.Name).length;\n    n += 1 + _l + sov(_l);\n  }\n\n  if (typeof link.Tsize === 'number') {\n    n += 1 + sov(link.Tsize);\n  }\n\n  return n;\n}\n\nfunction sizeNode(node) {\n  var n = 0;\n\n  if (node.Data) {\n    var l = node.Data.length;\n    n += 1 + l + sov(l);\n  }\n\n  if (node.Links) {\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = node.Links[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var link = _step.value;\n\n        var _l2 = sizeLink(link);\n\n        n += 1 + _l2 + sov(_l2);\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n  }\n\n  return n;\n}\n\nfunction encodeVarint(bytes, offset, v) {\n  offset -= sov(v);\n  var base = offset;\n\n  while (v >= maxUInt32) {\n    bytes[offset++] = v & 127 | 128;\n    v /= 128;\n  }\n\n  while (v >= 128) {\n    bytes[offset++] = v & 127 | 128;\n    v >>>= 7;\n  }\n\n  bytes[offset] = v;\n  return base;\n}\n\nfunction sov(x) {\n  if (x % 2 === 0) {\n    x++;\n  }\n\n  return Math.floor((len64(x) + 6) / 7);\n}\n\nfunction len64(x) {\n  var n = 0;\n\n  if (x >= maxInt32) {\n    x = Math.floor(x / maxInt32);\n    n = 32;\n  }\n\n  if (x >= 1 << 16) {\n    x >>>= 16;\n    n += 16;\n  }\n\n  if (x >= 1 << 8) {\n    x >>>= 8;\n    n += 8;\n  }\n\n  return n + len8tab[x];\n}\n\nvar len8tab = [0, 1, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8];\nexports.encodeNode = encodeNode;","map":null,"metadata":{},"sourceType":"script"}