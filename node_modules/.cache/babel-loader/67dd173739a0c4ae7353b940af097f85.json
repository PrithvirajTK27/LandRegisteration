{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar token = require('./token.js');\n\nvar _0uint = require('./0uint.js');\n\nvar _1negint = require('./1negint.js');\n\nvar _2bytes = require('./2bytes.js');\n\nvar _3string = require('./3string.js');\n\nvar _4array = require('./4array.js');\n\nvar _5map = require('./5map.js');\n\nvar _6tag = require('./6tag.js');\n\nvar _7float = require('./7float.js');\n\nvar common = require('./common.js');\n\nvar byteUtils = require('./byte-utils.js');\n\nfunction invalidMinor(data, pos, minor) {\n  throw new Error(\"\".concat(common.decodeErrPrefix, \" encountered invalid minor (\").concat(minor, \") for major \").concat(data[pos] >>> 5));\n}\n\nfunction errorer(msg) {\n  return function () {\n    throw new Error(\"\".concat(common.decodeErrPrefix, \" \").concat(msg));\n  };\n}\n\nvar jump = [];\n\nfor (var i = 0; i <= 23; i++) {\n  jump[i] = invalidMinor;\n}\n\njump[24] = _0uint.decodeUint8;\njump[25] = _0uint.decodeUint16;\njump[26] = _0uint.decodeUint32;\njump[27] = _0uint.decodeUint64;\njump[28] = invalidMinor;\njump[29] = invalidMinor;\njump[30] = invalidMinor;\njump[31] = invalidMinor;\n\nfor (var _i = 32; _i <= 55; _i++) {\n  jump[_i] = invalidMinor;\n}\n\njump[56] = _1negint.decodeNegint8;\njump[57] = _1negint.decodeNegint16;\njump[58] = _1negint.decodeNegint32;\njump[59] = _1negint.decodeNegint64;\njump[60] = invalidMinor;\njump[61] = invalidMinor;\njump[62] = invalidMinor;\njump[63] = invalidMinor;\n\nfor (var _i2 = 64; _i2 <= 87; _i2++) {\n  jump[_i2] = _2bytes.decodeBytesCompact;\n}\n\njump[88] = _2bytes.decodeBytes8;\njump[89] = _2bytes.decodeBytes16;\njump[90] = _2bytes.decodeBytes32;\njump[91] = _2bytes.decodeBytes64;\njump[92] = invalidMinor;\njump[93] = invalidMinor;\njump[94] = invalidMinor;\njump[95] = errorer('indefinite length bytes/strings are not supported');\n\nfor (var _i3 = 96; _i3 <= 119; _i3++) {\n  jump[_i3] = _3string.decodeStringCompact;\n}\n\njump[120] = _3string.decodeString8;\njump[121] = _3string.decodeString16;\njump[122] = _3string.decodeString32;\njump[123] = _3string.decodeString64;\njump[124] = invalidMinor;\njump[125] = invalidMinor;\njump[126] = invalidMinor;\njump[127] = errorer('indefinite length bytes/strings are not supported');\n\nfor (var _i4 = 128; _i4 <= 151; _i4++) {\n  jump[_i4] = _4array.decodeArrayCompact;\n}\n\njump[152] = _4array.decodeArray8;\njump[153] = _4array.decodeArray16;\njump[154] = _4array.decodeArray32;\njump[155] = _4array.decodeArray64;\njump[156] = invalidMinor;\njump[157] = invalidMinor;\njump[158] = invalidMinor;\njump[159] = _4array.decodeArrayIndefinite;\n\nfor (var _i5 = 160; _i5 <= 183; _i5++) {\n  jump[_i5] = _5map.decodeMapCompact;\n}\n\njump[184] = _5map.decodeMap8;\njump[185] = _5map.decodeMap16;\njump[186] = _5map.decodeMap32;\njump[187] = _5map.decodeMap64;\njump[188] = invalidMinor;\njump[189] = invalidMinor;\njump[190] = invalidMinor;\njump[191] = _5map.decodeMapIndefinite;\n\nfor (var _i6 = 192; _i6 <= 215; _i6++) {\n  jump[_i6] = _6tag.decodeTagCompact;\n}\n\njump[216] = _6tag.decodeTag8;\njump[217] = _6tag.decodeTag16;\njump[218] = _6tag.decodeTag32;\njump[219] = _6tag.decodeTag64;\njump[220] = invalidMinor;\njump[221] = invalidMinor;\njump[222] = invalidMinor;\njump[223] = invalidMinor;\n\nfor (var _i7 = 224; _i7 <= 243; _i7++) {\n  jump[_i7] = errorer('simple values are not supported');\n}\n\njump[244] = invalidMinor;\njump[245] = invalidMinor;\njump[246] = invalidMinor;\njump[247] = _7float.decodeUndefined;\njump[248] = errorer('simple values are not supported');\njump[249] = _7float.decodeFloat16;\njump[250] = _7float.decodeFloat32;\njump[251] = _7float.decodeFloat64;\njump[252] = invalidMinor;\njump[253] = invalidMinor;\njump[254] = invalidMinor;\njump[255] = _7float.decodeBreak;\nvar quick = [];\n\nfor (var _i8 = 0; _i8 < 24; _i8++) {\n  quick[_i8] = new token.Token(token.Type.uint, _i8, 1);\n}\n\nfor (var _i9 = -1; _i9 >= -24; _i9--) {\n  quick[31 - _i9] = new token.Token(token.Type.negint, _i9, 1);\n}\n\nquick[64] = new token.Token(token.Type.bytes, new Uint8Array(0), 1);\nquick[96] = new token.Token(token.Type.string, '', 1);\nquick[128] = new token.Token(token.Type.array, 0, 1);\nquick[160] = new token.Token(token.Type.map, 0, 1);\nquick[244] = new token.Token(token.Type.false, false, 1);\nquick[245] = new token.Token(token.Type.true, true, 1);\nquick[246] = new token.Token(token.Type.null, null, 1);\n\nfunction quickEncodeToken(token$1) {\n  switch (token$1.type) {\n    case token.Type.false:\n      return byteUtils.fromArray([244]);\n\n    case token.Type.true:\n      return byteUtils.fromArray([245]);\n\n    case token.Type.null:\n      return byteUtils.fromArray([246]);\n\n    case token.Type.bytes:\n      if (!token$1.value.length) {\n        return byteUtils.fromArray([64]);\n      }\n\n      return;\n\n    case token.Type.string:\n      if (token$1.value === '') {\n        return byteUtils.fromArray([96]);\n      }\n\n      return;\n\n    case token.Type.array:\n      if (token$1.value === 0) {\n        return byteUtils.fromArray([128]);\n      }\n\n      return;\n\n    case token.Type.map:\n      if (token$1.value === 0) {\n        return byteUtils.fromArray([160]);\n      }\n\n      return;\n\n    case token.Type.uint:\n      if (token$1.value < 24) {\n        return byteUtils.fromArray([Number(token$1.value)]);\n      }\n\n      return;\n\n    case token.Type.negint:\n      if (token$1.value >= -24) {\n        return byteUtils.fromArray([31 - Number(token$1.value)]);\n      }\n\n  }\n}\n\nexports.jump = jump;\nexports.quick = quick;\nexports.quickEncodeToken = quickEncodeToken;","map":null,"metadata":{},"sourceType":"script"}