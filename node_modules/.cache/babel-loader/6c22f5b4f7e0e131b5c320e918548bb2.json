{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar token = require('./token.js');\n\nvar common = require('./common.js');\n\nvar _0uint = require('./0uint.js');\n\nvar byteUtils = require('./byte-utils.js');\n\nfunction toToken(data, pos, prefix, length) {\n  common.assertEnoughData(data, pos, prefix + length);\n  var buf = byteUtils.slice(data, pos + prefix, pos + prefix + length);\n  return new token.Token(token.Type.bytes, buf, prefix + length);\n}\n\nfunction decodeBytesCompact(data, pos, minor, _options) {\n  return toToken(data, pos, 1, minor);\n}\n\nfunction decodeBytes8(data, pos, _minor, options) {\n  return toToken(data, pos, 2, _0uint.readUint8(data, pos + 1, options));\n}\n\nfunction decodeBytes16(data, pos, _minor, options) {\n  return toToken(data, pos, 3, _0uint.readUint16(data, pos + 1, options));\n}\n\nfunction decodeBytes32(data, pos, _minor, options) {\n  return toToken(data, pos, 5, _0uint.readUint32(data, pos + 1, options));\n}\n\nfunction decodeBytes64(data, pos, _minor, options) {\n  var l = _0uint.readUint64(data, pos + 1, options);\n\n  if (typeof l === 'bigint') {\n    throw new Error(\"\".concat(common.decodeErrPrefix, \" 64-bit integer bytes lengths not supported\"));\n  }\n\n  return toToken(data, pos, 9, l);\n}\n\nfunction tokenBytes(token$1) {\n  if (token$1.encodedBytes === undefined) {\n    token$1.encodedBytes = token$1.type === token.Type.string ? byteUtils.fromString(token$1.value) : token$1.value;\n  }\n\n  return token$1.encodedBytes;\n}\n\nfunction encodeBytes(buf, token) {\n  var bytes = tokenBytes(token);\n\n  _0uint.encodeUintValue(buf, token.type.majorEncoded, bytes.length);\n\n  buf.push(bytes);\n}\n\nencodeBytes.encodedSize = function encodedSize(token) {\n  var bytes = tokenBytes(token);\n  return _0uint.encodeUintValue.encodedSize(bytes.length) + bytes.length;\n};\n\nencodeBytes.compareTokens = function compareTokens(tok1, tok2) {\n  return compareBytes(tokenBytes(tok1), tokenBytes(tok2));\n};\n\nfunction compareBytes(b1, b2) {\n  return b1.length < b2.length ? -1 : b1.length > b2.length ? 1 : byteUtils.compare(b1, b2);\n}\n\nexports.compareBytes = compareBytes;\nexports.decodeBytes16 = decodeBytes16;\nexports.decodeBytes32 = decodeBytes32;\nexports.decodeBytes64 = decodeBytes64;\nexports.decodeBytes8 = decodeBytes8;\nexports.decodeBytesCompact = decodeBytesCompact;\nexports.encodeBytes = encodeBytes;","map":null,"metadata":{},"sourceType":"script"}