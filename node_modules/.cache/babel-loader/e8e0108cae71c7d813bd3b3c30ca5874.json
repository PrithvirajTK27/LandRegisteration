{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\prith\\\\Desktop\\\\New folder (5)\\\\starter_kit-master\\\\LandRegisteration\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _awaitAsyncGenerator = require(\"C:\\\\Users\\\\prith\\\\Desktop\\\\New folder (5)\\\\starter_kit-master\\\\LandRegisteration\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"C:\\\\Users\\\\prith\\\\Desktop\\\\New folder (5)\\\\starter_kit-master\\\\LandRegisteration\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"C:\\\\Users\\\\prith\\\\Desktop\\\\New folder (5)\\\\starter_kit-master\\\\LandRegisteration\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncIterator\");\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar configure = require('../lib/configure.js');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params.js');\n\nvar abortSignal = require('../lib/abort-signal.js');\n\nvar multipartRequest = require('ipfs-core-utils/multipart-request');\n\nvar cid = require('multiformats/cid');\n\nvar createImport = configure.configure(function (api) {\n  function dagImport(_x) {\n    return _dagImport.apply(this, arguments);\n  }\n\n  function _dagImport() {\n    _dagImport = _wrapAsyncGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(source) {\n      var options,\n          controller,\n          signal,\n          _ref,\n          headers,\n          body,\n          res,\n          _iteratorNormalCompletion,\n          _didIteratorError,\n          _iteratorError,\n          _iterator,\n          _step,\n          _value,\n          _value2,\n          Root,\n          Cid,\n          PinErrorMsg,\n          _args = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n              controller = new AbortController();\n              signal = abortSignal.abortSignal(controller.signal, options.signal);\n              _context.next = 5;\n              return _awaitAsyncGenerator(multipartRequest.multipartRequest(source, controller, options.headers));\n\n            case 5:\n              _ref = _context.sent;\n              headers = _ref.headers;\n              body = _ref.body;\n              _context.next = 10;\n              return _awaitAsyncGenerator(api.post('dag/import', {\n                signal: signal,\n                headers: headers,\n                body: body,\n                searchParams: toUrlSearchParams.toUrlSearchParams({\n                  'pin-roots': options.pinRoots\n                })\n              }));\n\n            case 10:\n              res = _context.sent;\n              _iteratorNormalCompletion = true;\n              _didIteratorError = false;\n              _context.prev = 13;\n              _iterator = _asyncIterator(res.ndjson());\n\n            case 15:\n              _context.next = 17;\n              return _awaitAsyncGenerator(_iterator.next());\n\n            case 17:\n              _step = _context.sent;\n              _iteratorNormalCompletion = _step.done;\n              _context.next = 21;\n              return _awaitAsyncGenerator(_step.value);\n\n            case 21:\n              _value = _context.sent;\n\n              if (_iteratorNormalCompletion) {\n                _context.next = 31;\n                break;\n              }\n\n              _value2 = _value, Root = _value2.Root;\n\n              if (!(Root !== undefined)) {\n                _context.next = 28;\n                break;\n              }\n\n              Cid = Root.Cid['/'], PinErrorMsg = Root.PinErrorMsg;\n              _context.next = 28;\n              return {\n                root: {\n                  cid: cid.CID.parse(Cid),\n                  pinErrorMsg: PinErrorMsg\n                }\n              };\n\n            case 28:\n              _iteratorNormalCompletion = true;\n              _context.next = 15;\n              break;\n\n            case 31:\n              _context.next = 37;\n              break;\n\n            case 33:\n              _context.prev = 33;\n              _context.t0 = _context[\"catch\"](13);\n              _didIteratorError = true;\n              _iteratorError = _context.t0;\n\n            case 37:\n              _context.prev = 37;\n              _context.prev = 38;\n\n              if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                _context.next = 42;\n                break;\n              }\n\n              _context.next = 42;\n              return _awaitAsyncGenerator(_iterator.return());\n\n            case 42:\n              _context.prev = 42;\n\n              if (!_didIteratorError) {\n                _context.next = 45;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 45:\n              return _context.finish(42);\n\n            case 46:\n              return _context.finish(37);\n\n            case 47:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[13, 33, 37, 47], [38,, 42, 46]]);\n    }));\n    return _dagImport.apply(this, arguments);\n  }\n\n  return dagImport;\n});\nexports.createImport = createImport;","map":null,"metadata":{},"sourceType":"script"}