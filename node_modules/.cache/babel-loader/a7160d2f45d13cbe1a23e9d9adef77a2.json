{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\prith\\\\Desktop\\\\New folder (5)\\\\starter_kit-master\\\\LandRegisteration\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\prith\\\\Desktop\\\\New folder (5)\\\\starter_kit-master\\\\LandRegisteration\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar errcode = require('err-code');\n\nvar unixfs = require('./unixfs.js');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nvar errcode__default =\n/*#__PURE__*/\n_interopDefaultLegacy(errcode);\n\nvar PBData = unixfs.Data;\nvar types = ['raw', 'directory', 'file', 'metadata', 'symlink', 'hamt-sharded-directory'];\nvar dirTypes = ['directory', 'hamt-sharded-directory'];\nvar DEFAULT_FILE_MODE = parseInt('0644', 8);\nvar DEFAULT_DIRECTORY_MODE = parseInt('0755', 8);\n\nfunction parseMode(mode) {\n  if (mode == null) {\n    return undefined;\n  }\n\n  if (typeof mode === 'number') {\n    return mode & 4095;\n  }\n\n  mode = mode.toString();\n\n  if (mode.substring(0, 1) === '0') {\n    return parseInt(mode, 8) & 4095;\n  }\n\n  return parseInt(mode, 10) & 4095;\n}\n\nfunction parseMtime(input) {\n  if (input == null) {\n    return undefined;\n  }\n\n  var mtime;\n\n  if (input.secs != null) {\n    mtime = {\n      secs: input.secs,\n      nsecs: input.nsecs\n    };\n  }\n\n  if (input.Seconds != null) {\n    mtime = {\n      secs: input.Seconds,\n      nsecs: input.FractionalNanoseconds\n    };\n  }\n\n  if (Array.isArray(input)) {\n    mtime = {\n      secs: input[0],\n      nsecs: input[1]\n    };\n  }\n\n  if (input instanceof Date) {\n    var ms = input.getTime();\n    var secs = Math.floor(ms / 1000);\n    mtime = {\n      secs: secs,\n      nsecs: (ms - secs * 1000) * 1000\n    };\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(mtime, 'secs')) {\n    return undefined;\n  }\n\n  if (mtime != null && mtime.nsecs != null && (mtime.nsecs < 0 || mtime.nsecs > 999999999)) {\n    throw errcode__default[\"default\"](new Error('mtime-nsecs must be within the range [0,999999999]'), 'ERR_INVALID_MTIME_NSECS');\n  }\n\n  return mtime;\n}\n\nvar UnixFS =\n/*#__PURE__*/\nfunction () {\n  _createClass(UnixFS, null, [{\n    key: \"unmarshal\",\n    value: function unmarshal(marshaled) {\n      var message = PBData.decode(marshaled);\n      var decoded = PBData.toObject(message, {\n        defaults: false,\n        arrays: true,\n        longs: Number,\n        objects: false\n      });\n      var data = new UnixFS({\n        type: types[decoded.Type],\n        data: decoded.Data,\n        blockSizes: decoded.blocksizes,\n        mode: decoded.mode,\n        mtime: decoded.mtime ? {\n          secs: decoded.mtime.Seconds,\n          nsecs: decoded.mtime.FractionalNanoseconds\n        } : undefined\n      });\n      data._originalMode = decoded.mode || 0;\n      return data;\n    }\n  }]);\n\n  function UnixFS() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      type: 'file'\n    };\n\n    _classCallCheck(this, UnixFS);\n\n    var type = options.type,\n        data = options.data,\n        blockSizes = options.blockSizes,\n        hashType = options.hashType,\n        fanout = options.fanout,\n        mtime = options.mtime,\n        mode = options.mode;\n\n    if (type && !types.includes(type)) {\n      throw errcode__default[\"default\"](new Error('Type: ' + type + ' is not valid'), 'ERR_INVALID_TYPE');\n    }\n\n    this.type = type || 'file';\n    this.data = data;\n    this.hashType = hashType;\n    this.fanout = fanout;\n    this.blockSizes = blockSizes || [];\n    this._originalMode = 0;\n    this.mode = parseMode(mode);\n\n    if (mtime) {\n      this.mtime = parseMtime(mtime);\n\n      if (this.mtime && !this.mtime.nsecs) {\n        this.mtime.nsecs = 0;\n      }\n    }\n  }\n\n  _createClass(UnixFS, [{\n    key: \"isDirectory\",\n    value: function isDirectory() {\n      return Boolean(this.type && dirTypes.includes(this.type));\n    }\n  }, {\n    key: \"addBlockSize\",\n    value: function addBlockSize(size) {\n      this.blockSizes.push(size);\n    }\n  }, {\n    key: \"removeBlockSize\",\n    value: function removeBlockSize(index) {\n      this.blockSizes.splice(index, 1);\n    }\n  }, {\n    key: \"fileSize\",\n    value: function fileSize() {\n      if (this.isDirectory()) {\n        return 0;\n      }\n\n      var sum = 0;\n      this.blockSizes.forEach(function (size) {\n        sum += size;\n      });\n\n      if (this.data) {\n        sum += this.data.length;\n      }\n\n      return sum;\n    }\n  }, {\n    key: \"marshal\",\n    value: function marshal() {\n      var type;\n\n      switch (this.type) {\n        case 'raw':\n          type = PBData.DataType.Raw;\n          break;\n\n        case 'directory':\n          type = PBData.DataType.Directory;\n          break;\n\n        case 'file':\n          type = PBData.DataType.File;\n          break;\n\n        case 'metadata':\n          type = PBData.DataType.Metadata;\n          break;\n\n        case 'symlink':\n          type = PBData.DataType.Symlink;\n          break;\n\n        case 'hamt-sharded-directory':\n          type = PBData.DataType.HAMTShard;\n          break;\n\n        default:\n          throw errcode__default[\"default\"](new Error('Type: ' + type + ' is not valid'), 'ERR_INVALID_TYPE');\n      }\n\n      var data = this.data;\n\n      if (!this.data || !this.data.length) {\n        data = undefined;\n      }\n\n      var mode;\n\n      if (this.mode != null) {\n        mode = this._originalMode & 4294963200 | (parseMode(this.mode) || 0);\n\n        if (mode === DEFAULT_FILE_MODE && !this.isDirectory()) {\n          mode = undefined;\n        }\n\n        if (mode === DEFAULT_DIRECTORY_MODE && this.isDirectory()) {\n          mode = undefined;\n        }\n      }\n\n      var mtime;\n\n      if (this.mtime != null) {\n        var parsed = parseMtime(this.mtime);\n\n        if (parsed) {\n          mtime = {\n            Seconds: parsed.secs,\n            FractionalNanoseconds: parsed.nsecs\n          };\n\n          if (mtime.FractionalNanoseconds === 0) {\n            delete mtime.FractionalNanoseconds;\n          }\n        }\n      }\n\n      var pbData = {\n        Type: type,\n        Data: data,\n        filesize: this.isDirectory() ? undefined : this.fileSize(),\n        blocksizes: this.blockSizes,\n        hashType: this.hashType,\n        fanout: this.fanout,\n        mode: mode,\n        mtime: mtime\n      };\n      return PBData.encode(pbData).finish();\n    }\n  }, {\n    key: \"mode\",\n    set: function set(mode) {\n      this._mode = this.isDirectory() ? DEFAULT_DIRECTORY_MODE : DEFAULT_FILE_MODE;\n      var parsedMode = parseMode(mode);\n\n      if (parsedMode !== undefined) {\n        this._mode = parsedMode;\n      }\n    },\n    get: function get() {\n      return this._mode;\n    }\n  }]);\n\n  return UnixFS;\n}();\n\nexports.UnixFS = UnixFS;\nexports.parseMode = parseMode;\nexports.parseMtime = parseMtime;","map":null,"metadata":{},"sourceType":"script"}