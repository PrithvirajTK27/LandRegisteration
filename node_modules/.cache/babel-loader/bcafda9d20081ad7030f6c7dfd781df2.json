{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\prith\\\\Desktop\\\\New folder (5)\\\\starter_kit-master\\\\LandRegisteration\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _objectSpread = require(\"C:\\\\Users\\\\prith\\\\Desktop\\\\New folder (5)\\\\starter_kit-master\\\\LandRegisteration\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread\");\n\nvar _asyncToGenerator = require(\"C:\\\\Users\\\\prith\\\\Desktop\\\\New folder (5)\\\\starter_kit-master\\\\LandRegisteration\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncToGenerator\");\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar cid = require('multiformats/cid');\n\nvar configure = require('../lib/configure.js');\n\nvar multipartRequest = require('ipfs-core-utils/multipart-request');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params.js');\n\nvar abortSignal = require('../lib/abort-signal.js');\n\nvar createPut = function createPut(codecs, options) {\n  var fn = configure.configure(function (api) {\n    var put =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dagNode) {\n        var options,\n            settings,\n            serialized,\n            storeCodec,\n            controller,\n            signal,\n            res,\n            data,\n            _args = arguments;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n                settings = _objectSpread({\n                  storeCodec: 'dag-cbor',\n                  hashAlg: 'sha2-256'\n                }, options);\n\n                if (!settings.inputCodec) {\n                  _context.next = 8;\n                  break;\n                }\n\n                if (dagNode instanceof Uint8Array) {\n                  _context.next = 5;\n                  break;\n                }\n\n                throw new Error('Can only inputCodec on raw bytes that can be decoded');\n\n              case 5:\n                serialized = dagNode;\n                _context.next = 13;\n                break;\n\n              case 8:\n                _context.next = 10;\n                return codecs.getCodec(settings.storeCodec);\n\n              case 10:\n                storeCodec = _context.sent;\n                serialized = storeCodec.encode(dagNode);\n                settings.inputCodec = settings.storeCodec;\n\n              case 13:\n                controller = new AbortController();\n                signal = abortSignal.abortSignal(controller.signal, settings.signal);\n                _context.t0 = api;\n                _context.t1 = _objectSpread;\n                _context.t2 = {\n                  timeout: settings.timeout,\n                  signal: signal,\n                  searchParams: toUrlSearchParams.toUrlSearchParams(settings)\n                };\n                _context.next = 20;\n                return multipartRequest.multipartRequest([serialized], controller, settings.headers);\n\n              case 20:\n                _context.t3 = _context.sent;\n                _context.t4 = (0, _context.t1)(_context.t2, _context.t3);\n                _context.next = 24;\n                return _context.t0.post.call(_context.t0, 'dag/put', _context.t4);\n\n              case 24:\n                res = _context.sent;\n                _context.next = 27;\n                return res.json();\n\n              case 27:\n                data = _context.sent;\n                return _context.abrupt(\"return\", cid.CID.parse(data.Cid['/']));\n\n              case 29:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function put(_x) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    return put;\n  });\n  return fn(options);\n};\n\nexports.createPut = createPut;","map":null,"metadata":{},"sourceType":"script"}