{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\prith\\\\Desktop\\\\New folder (5)\\\\starter_kit-master\\\\LandRegisteration\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\prith\\\\Desktop\\\\New folder (5)\\\\starter_kit-master\\\\LandRegisteration\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"C:\\\\Users\\\\prith\\\\Desktop\\\\New folder (5)\\\\starter_kit-master\\\\LandRegisteration\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"C:\\\\Users\\\\prith\\\\Desktop\\\\New folder (5)\\\\starter_kit-master\\\\LandRegisteration\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/getPrototypeOf\");\n\nvar _get = require(\"C:\\\\Users\\\\prith\\\\Desktop\\\\New folder (5)\\\\starter_kit-master\\\\LandRegisteration\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/get\");\n\nvar _inherits = require(\"C:\\\\Users\\\\prith\\\\Desktop\\\\New folder (5)\\\\starter_kit-master\\\\LandRegisteration\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/inherits\");\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar multiformats = require('multiformats');\n\nvar base64 = require('multiformats/bases/base64');\n\nvar cborg = require('cborg');\n\nvar cborgJson = require('cborg/json');\n\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function get() {\n            return e[k];\n          }\n        });\n      }\n    });\n  }\n\n  n[\"default\"] = e;\n  return Object.freeze(n);\n}\n\nvar cborgJson__namespace =\n/*#__PURE__*/\n_interopNamespace(cborgJson);\n\nfunction cidEncoder(obj) {\n  if (obj.asCID !== obj) {\n    return null;\n  }\n\n  var cid = multiformats.CID.asCID(obj);\n\n  if (!cid) {\n    return null;\n  }\n\n  var cidString = cid.toString();\n  return [new cborg.Token(cborg.Type.map, Infinity, 1), new cborg.Token(cborg.Type.string, '/', 1), new cborg.Token(cborg.Type.string, cidString, cidString.length), new cborg.Token(cborg.Type.break, undefined, 1)];\n}\n\nfunction bytesEncoder(bytes) {\n  var bytesString = base64.base64.encode(bytes).slice(1);\n  return [new cborg.Token(cborg.Type.map, Infinity, 1), new cborg.Token(cborg.Type.string, '/', 1), new cborg.Token(cborg.Type.map, Infinity, 1), new cborg.Token(cborg.Type.string, 'bytes', 5), new cborg.Token(cborg.Type.string, bytesString, bytesString.length), new cborg.Token(cborg.Type.break, undefined, 1), new cborg.Token(cborg.Type.break, undefined, 1)];\n}\n\nfunction undefinedEncoder() {\n  throw new Error('`undefined` is not supported by the IPLD Data Model and cannot be encoded');\n}\n\nfunction numberEncoder(num) {\n  if (Number.isNaN(num)) {\n    throw new Error('`NaN` is not supported by the IPLD Data Model and cannot be encoded');\n  }\n\n  if (num === Infinity || num === -Infinity) {\n    throw new Error('`Infinity` and `-Infinity` is not supported by the IPLD Data Model and cannot be encoded');\n  }\n\n  return null;\n}\n\nvar encodeOptions = {\n  typeEncoders: {\n    Object: cidEncoder,\n    Uint8Array: bytesEncoder,\n    Buffer: bytesEncoder,\n    undefined: undefinedEncoder,\n    number: numberEncoder\n  }\n};\n\nvar DagJsonTokenizer =\n/*#__PURE__*/\nfunction (_cborgJson__namespace) {\n  _inherits(DagJsonTokenizer, _cborgJson__namespace);\n\n  function DagJsonTokenizer(data, options) {\n    var _this;\n\n    _classCallCheck(this, DagJsonTokenizer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(DagJsonTokenizer).call(this, data, options));\n    _this.tokenBuffer = [];\n    return _this;\n  }\n\n  _createClass(DagJsonTokenizer, [{\n    key: \"done\",\n    value: function done() {\n      return this.tokenBuffer.length === 0 && _get(_getPrototypeOf(DagJsonTokenizer.prototype), \"done\", this).call(this);\n    }\n  }, {\n    key: \"_next\",\n    value: function _next() {\n      if (this.tokenBuffer.length > 0) {\n        return this.tokenBuffer.pop();\n      }\n\n      return _get(_getPrototypeOf(DagJsonTokenizer.prototype), \"next\", this).call(this);\n    }\n  }, {\n    key: \"next\",\n    value: function next() {\n      var token = this._next();\n\n      if (token.type === cborg.Type.map) {\n        var keyToken = this._next();\n\n        if (keyToken.type === cborg.Type.string && keyToken.value === '/') {\n          var valueToken = this._next();\n\n          if (valueToken.type === cborg.Type.string) {\n            var breakToken = this._next();\n\n            if (breakToken.type !== cborg.Type.break) {\n              throw new Error('Invalid encoded CID form');\n            }\n\n            this.tokenBuffer.push(valueToken);\n            return new cborg.Token(cborg.Type.tag, 42, 0);\n          }\n\n          if (valueToken.type === cborg.Type.map) {\n            var innerKeyToken = this._next();\n\n            if (innerKeyToken.type === cborg.Type.string && innerKeyToken.value === 'bytes') {\n              var innerValueToken = this._next();\n\n              if (innerValueToken.type === cborg.Type.string) {\n                for (var i = 0; i < 2; i++) {\n                  var _breakToken = this._next();\n\n                  if (_breakToken.type !== cborg.Type.break) {\n                    throw new Error('Invalid encoded Bytes form');\n                  }\n                }\n\n                var bytes = base64.base64.decode(\"m\".concat(innerValueToken.value));\n                return new cborg.Token(cborg.Type.bytes, bytes, innerValueToken.value.length);\n              }\n\n              this.tokenBuffer.push(innerValueToken);\n            }\n\n            this.tokenBuffer.push(innerKeyToken);\n          }\n\n          this.tokenBuffer.push(valueToken);\n        }\n\n        this.tokenBuffer.push(keyToken);\n      }\n\n      return token;\n    }\n  }]);\n\n  return DagJsonTokenizer;\n}(cborgJson__namespace.Tokenizer);\n\nvar decodeOptions = {\n  allowIndefinite: false,\n  allowUndefined: false,\n  allowNaN: false,\n  allowInfinity: false,\n  allowBigInt: true,\n  strict: true,\n  useMaps: false,\n  tags: []\n};\ndecodeOptions.tags[42] = multiformats.CID.parse;\nvar name = 'dag-json';\nvar code = 297;\n\nvar encode = function encode(node) {\n  return cborgJson__namespace.encode(node, encodeOptions);\n};\n\nvar decode = function decode(data) {\n  var options = Object.assign(decodeOptions, {\n    tokenizer: new DagJsonTokenizer(data, decodeOptions)\n  });\n  return cborgJson__namespace.decode(data, options);\n};\n\nexports.code = code;\nexports.decode = decode;\nexports.encode = encode;\nexports.name = name;","map":null,"metadata":{},"sourceType":"script"}