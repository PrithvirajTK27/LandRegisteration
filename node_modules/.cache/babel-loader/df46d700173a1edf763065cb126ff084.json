{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar useBuffer = globalThis.process && !globalThis.process.browser && globalThis.Buffer && typeof globalThis.Buffer.isBuffer === 'function';\nvar textDecoder = new TextDecoder();\nvar textEncoder = new TextEncoder();\n\nfunction isBuffer(buf) {\n  return useBuffer && globalThis.Buffer.isBuffer(buf);\n}\n\nfunction asU8A(buf) {\n  if (!(buf instanceof Uint8Array)) {\n    return Uint8Array.from(buf);\n  }\n\n  return isBuffer(buf) ? new Uint8Array(buf.buffer, buf.byteOffset, buf.byteLength) : buf;\n}\n\nvar toString = useBuffer ? function (bytes, start, end) {\n  return end - start > 64 ? globalThis.Buffer.from(bytes.subarray(start, end)).toString('utf8') : utf8Slice(bytes, start, end);\n} : function (bytes, start, end) {\n  return end - start > 64 ? textDecoder.decode(bytes.subarray(start, end)) : utf8Slice(bytes, start, end);\n};\nvar fromString = useBuffer ? function (string) {\n  return string.length > 64 ? globalThis.Buffer.from(string) : utf8ToBytes(string);\n} : function (string) {\n  return string.length > 64 ? textEncoder.encode(string) : utf8ToBytes(string);\n};\n\nvar fromArray = function fromArray(arr) {\n  return Uint8Array.from(arr);\n};\n\nvar slice = useBuffer ? function (bytes, start, end) {\n  if (isBuffer(bytes)) {\n    return new Uint8Array(bytes.subarray(start, end));\n  }\n\n  return bytes.slice(start, end);\n} : function (bytes, start, end) {\n  return bytes.slice(start, end);\n};\nvar concat = useBuffer ? function (chunks, length) {\n  chunks = chunks.map(function (c) {\n    return c instanceof Uint8Array ? c : globalThis.Buffer.from(c);\n  });\n  return asU8A(globalThis.Buffer.concat(chunks, length));\n} : function (chunks, length) {\n  var out = new Uint8Array(length);\n  var off = 0;\n  var _iteratorNormalCompletion = true;\n  var _didIteratorError = false;\n  var _iteratorError = undefined;\n\n  try {\n    for (var _iterator = chunks[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n      var b = _step.value;\n\n      if (off + b.length > out.length) {\n        b = b.subarray(0, out.length - off);\n      }\n\n      out.set(b, off);\n      off += b.length;\n    }\n  } catch (err) {\n    _didIteratorError = true;\n    _iteratorError = err;\n  } finally {\n    try {\n      if (!_iteratorNormalCompletion && _iterator.return != null) {\n        _iterator.return();\n      }\n    } finally {\n      if (_didIteratorError) {\n        throw _iteratorError;\n      }\n    }\n  }\n\n  return out;\n};\nvar alloc = useBuffer ? function (size) {\n  return globalThis.Buffer.allocUnsafe(size);\n} : function (size) {\n  return new Uint8Array(size);\n};\nvar toHex = useBuffer ? function (d) {\n  if (typeof d === 'string') {\n    return d;\n  }\n\n  return globalThis.Buffer.from(toBytes(d)).toString('hex');\n} : function (d) {\n  if (typeof d === 'string') {\n    return d;\n  }\n\n  return Array.prototype.reduce.call(toBytes(d), function (p, c) {\n    return \"\".concat(p).concat(c.toString(16).padStart(2, '0'));\n  }, '');\n};\nvar fromHex = useBuffer ? function (hex) {\n  if (hex instanceof Uint8Array) {\n    return hex;\n  }\n\n  return globalThis.Buffer.from(hex, 'hex');\n} : function (hex) {\n  if (hex instanceof Uint8Array) {\n    return hex;\n  }\n\n  if (!hex.length) {\n    return new Uint8Array(0);\n  }\n\n  return new Uint8Array(hex.split('').map(function (c, i, d) {\n    return i % 2 === 0 ? \"0x\".concat(c).concat(d[i + 1]) : '';\n  }).filter(Boolean).map(function (e) {\n    return parseInt(e, 16);\n  }));\n};\n\nfunction toBytes(obj) {\n  if (obj instanceof Uint8Array && obj.constructor.name === 'Uint8Array') {\n    return obj;\n  }\n\n  if (obj instanceof ArrayBuffer) {\n    return new Uint8Array(obj);\n  }\n\n  if (ArrayBuffer.isView(obj)) {\n    return new Uint8Array(obj.buffer, obj.byteOffset, obj.byteLength);\n  }\n\n  throw new Error('Unknown type, must be binary type');\n}\n\nfunction compare(b1, b2) {\n  if (isBuffer(b1) && isBuffer(b2)) {\n    return b1.compare(b2);\n  }\n\n  for (var i = 0; i < b1.length; i++) {\n    if (b1[i] === b2[i]) {\n      continue;\n    }\n\n    return b1[i] < b2[i] ? -1 : 1;\n  }\n\n  return 0;\n}\n\nfunction utf8ToBytes(string) {\n  var units = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Infinity;\n  var codePoint;\n  var length = string.length;\n  var leadSurrogate = null;\n  var bytes = [];\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i);\n\n    if (codePoint > 55295 && codePoint < 57344) {\n      if (!leadSurrogate) {\n        if (codePoint > 56319) {\n          if ((units -= 3) > -1) bytes.push(239, 191, 189);\n          continue;\n        } else if (i + 1 === length) {\n          if ((units -= 3) > -1) bytes.push(239, 191, 189);\n          continue;\n        }\n\n        leadSurrogate = codePoint;\n        continue;\n      }\n\n      if (codePoint < 56320) {\n        if ((units -= 3) > -1) bytes.push(239, 191, 189);\n        leadSurrogate = codePoint;\n        continue;\n      }\n\n      codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;\n    } else if (leadSurrogate) {\n      if ((units -= 3) > -1) bytes.push(239, 191, 189);\n    }\n\n    leadSurrogate = null;\n\n    if (codePoint < 128) {\n      if ((units -= 1) < 0) break;\n      bytes.push(codePoint);\n    } else if (codePoint < 2048) {\n      if ((units -= 2) < 0) break;\n      bytes.push(codePoint >> 6 | 192, codePoint & 63 | 128);\n    } else if (codePoint < 65536) {\n      if ((units -= 3) < 0) break;\n      bytes.push(codePoint >> 12 | 224, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);\n    } else if (codePoint < 1114112) {\n      if ((units -= 4) < 0) break;\n      bytes.push(codePoint >> 18 | 240, codePoint >> 12 & 63 | 128, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);\n    } else {\n      throw new Error('Invalid code point');\n    }\n  }\n\n  return bytes;\n}\n\nfunction utf8Slice(buf, offset, end) {\n  var res = [];\n\n  while (offset < end) {\n    var firstByte = buf[offset];\n    var codePoint = null;\n    var bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;\n\n    if (offset + bytesPerSequence <= end) {\n      var secondByte = void 0,\n          thirdByte = void 0,\n          fourthByte = void 0,\n          tempCodePoint = void 0;\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 128) {\n            codePoint = firstByte;\n          }\n\n          break;\n\n        case 2:\n          secondByte = buf[offset + 1];\n\n          if ((secondByte & 192) === 128) {\n            tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;\n\n            if (tempCodePoint > 127) {\n              codePoint = tempCodePoint;\n            }\n          }\n\n          break;\n\n        case 3:\n          secondByte = buf[offset + 1];\n          thirdByte = buf[offset + 2];\n\n          if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {\n            tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;\n\n            if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {\n              codePoint = tempCodePoint;\n            }\n          }\n\n          break;\n\n        case 4:\n          secondByte = buf[offset + 1];\n          thirdByte = buf[offset + 2];\n          fourthByte = buf[offset + 3];\n\n          if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {\n            tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;\n\n            if (tempCodePoint > 65535 && tempCodePoint < 1114112) {\n              codePoint = tempCodePoint;\n            }\n          }\n\n      }\n    }\n\n    if (codePoint === null) {\n      codePoint = 65533;\n      bytesPerSequence = 1;\n    } else if (codePoint > 65535) {\n      codePoint -= 65536;\n      res.push(codePoint >>> 10 & 1023 | 55296);\n      codePoint = 56320 | codePoint & 1023;\n    }\n\n    res.push(codePoint);\n    offset += bytesPerSequence;\n  }\n\n  return decodeCodePointsArray(res);\n}\n\nvar MAX_ARGUMENTS_LENGTH = 4096;\n\nfunction decodeCodePointsArray(codePoints) {\n  var len = codePoints.length;\n\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints);\n  }\n\n  var res = '';\n  var i = 0;\n\n  while (i < len) {\n    res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));\n  }\n\n  return res;\n}\n\nexports.alloc = alloc;\nexports.asU8A = asU8A;\nexports.compare = compare;\nexports.concat = concat;\nexports.decodeCodePointsArray = decodeCodePointsArray;\nexports.fromArray = fromArray;\nexports.fromHex = fromHex;\nexports.fromString = fromString;\nexports.slice = slice;\nexports.toHex = toHex;\nexports.toString = toString;\nexports.useBuffer = useBuffer;","map":null,"metadata":{},"sourceType":"script"}