{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar $protobuf = require('protobufjs/minimal.js');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nvar $protobuf__default =\n/*#__PURE__*/\n_interopDefaultLegacy($protobuf);\n\nvar $Reader = $protobuf__default[\"default\"].Reader,\n    $Writer = $protobuf__default[\"default\"].Writer,\n    $util = $protobuf__default[\"default\"].util;\nvar $root = $protobuf__default[\"default\"].roots['ipfs-unixfs'] || ($protobuf__default[\"default\"].roots['ipfs-unixfs'] = {});\n\nvar Data = $root.Data = function () {\n  function Data(p) {\n    this.blocksizes = [];\n    if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {\n      if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];\n    }\n  }\n\n  Data.prototype.Type = 0;\n  Data.prototype.Data = $util.newBuffer([]);\n  Data.prototype.filesize = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n  Data.prototype.blocksizes = $util.emptyArray;\n  Data.prototype.hashType = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n  Data.prototype.fanout = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n  Data.prototype.mode = 0;\n  Data.prototype.mtime = null;\n\n  Data.encode = function encode(m, w) {\n    if (!w) w = $Writer.create();\n    w.uint32(8).int32(m.Type);\n    if (m.Data != null && Object.hasOwnProperty.call(m, 'Data')) w.uint32(18).bytes(m.Data);\n    if (m.filesize != null && Object.hasOwnProperty.call(m, 'filesize')) w.uint32(24).uint64(m.filesize);\n\n    if (m.blocksizes != null && m.blocksizes.length) {\n      for (var i = 0; i < m.blocksizes.length; ++i) {\n        w.uint32(32).uint64(m.blocksizes[i]);\n      }\n    }\n\n    if (m.hashType != null && Object.hasOwnProperty.call(m, 'hashType')) w.uint32(40).uint64(m.hashType);\n    if (m.fanout != null && Object.hasOwnProperty.call(m, 'fanout')) w.uint32(48).uint64(m.fanout);\n    if (m.mode != null && Object.hasOwnProperty.call(m, 'mode')) w.uint32(56).uint32(m.mode);\n    if (m.mtime != null && Object.hasOwnProperty.call(m, 'mtime')) $root.UnixTime.encode(m.mtime, w.uint32(66).fork()).ldelim();\n    return w;\n  };\n\n  Data.decode = function decode(r, l) {\n    if (!(r instanceof $Reader)) r = $Reader.create(r);\n    var c = l === undefined ? r.len : r.pos + l,\n        m = new $root.Data();\n\n    while (r.pos < c) {\n      var t = r.uint32();\n\n      switch (t >>> 3) {\n        case 1:\n          m.Type = r.int32();\n          break;\n\n        case 2:\n          m.Data = r.bytes();\n          break;\n\n        case 3:\n          m.filesize = r.uint64();\n          break;\n\n        case 4:\n          if (!(m.blocksizes && m.blocksizes.length)) m.blocksizes = [];\n\n          if ((t & 7) === 2) {\n            var c2 = r.uint32() + r.pos;\n\n            while (r.pos < c2) {\n              m.blocksizes.push(r.uint64());\n            }\n          } else m.blocksizes.push(r.uint64());\n\n          break;\n\n        case 5:\n          m.hashType = r.uint64();\n          break;\n\n        case 6:\n          m.fanout = r.uint64();\n          break;\n\n        case 7:\n          m.mode = r.uint32();\n          break;\n\n        case 8:\n          m.mtime = $root.UnixTime.decode(r, r.uint32());\n          break;\n\n        default:\n          r.skipType(t & 7);\n          break;\n      }\n    }\n\n    if (!m.hasOwnProperty('Type')) throw $util.ProtocolError('missing required \\'Type\\'', {\n      instance: m\n    });\n    return m;\n  };\n\n  Data.fromObject = function fromObject(d) {\n    if (d instanceof $root.Data) return d;\n    var m = new $root.Data();\n\n    switch (d.Type) {\n      case 'Raw':\n      case 0:\n        m.Type = 0;\n        break;\n\n      case 'Directory':\n      case 1:\n        m.Type = 1;\n        break;\n\n      case 'File':\n      case 2:\n        m.Type = 2;\n        break;\n\n      case 'Metadata':\n      case 3:\n        m.Type = 3;\n        break;\n\n      case 'Symlink':\n      case 4:\n        m.Type = 4;\n        break;\n\n      case 'HAMTShard':\n      case 5:\n        m.Type = 5;\n        break;\n    }\n\n    if (d.Data != null) {\n      if (typeof d.Data === 'string') $util.base64.decode(d.Data, m.Data = $util.newBuffer($util.base64.length(d.Data)), 0);else if (d.Data.length) m.Data = d.Data;\n    }\n\n    if (d.filesize != null) {\n      if ($util.Long) (m.filesize = $util.Long.fromValue(d.filesize)).unsigned = true;else if (typeof d.filesize === 'string') m.filesize = parseInt(d.filesize, 10);else if (typeof d.filesize === 'number') m.filesize = d.filesize;else if (typeof d.filesize === 'object') m.filesize = new $util.LongBits(d.filesize.low >>> 0, d.filesize.high >>> 0).toNumber(true);\n    }\n\n    if (d.blocksizes) {\n      if (!Array.isArray(d.blocksizes)) throw TypeError('.Data.blocksizes: array expected');\n      m.blocksizes = [];\n\n      for (var i = 0; i < d.blocksizes.length; ++i) {\n        if ($util.Long) (m.blocksizes[i] = $util.Long.fromValue(d.blocksizes[i])).unsigned = true;else if (typeof d.blocksizes[i] === 'string') m.blocksizes[i] = parseInt(d.blocksizes[i], 10);else if (typeof d.blocksizes[i] === 'number') m.blocksizes[i] = d.blocksizes[i];else if (typeof d.blocksizes[i] === 'object') m.blocksizes[i] = new $util.LongBits(d.blocksizes[i].low >>> 0, d.blocksizes[i].high >>> 0).toNumber(true);\n      }\n    }\n\n    if (d.hashType != null) {\n      if ($util.Long) (m.hashType = $util.Long.fromValue(d.hashType)).unsigned = true;else if (typeof d.hashType === 'string') m.hashType = parseInt(d.hashType, 10);else if (typeof d.hashType === 'number') m.hashType = d.hashType;else if (typeof d.hashType === 'object') m.hashType = new $util.LongBits(d.hashType.low >>> 0, d.hashType.high >>> 0).toNumber(true);\n    }\n\n    if (d.fanout != null) {\n      if ($util.Long) (m.fanout = $util.Long.fromValue(d.fanout)).unsigned = true;else if (typeof d.fanout === 'string') m.fanout = parseInt(d.fanout, 10);else if (typeof d.fanout === 'number') m.fanout = d.fanout;else if (typeof d.fanout === 'object') m.fanout = new $util.LongBits(d.fanout.low >>> 0, d.fanout.high >>> 0).toNumber(true);\n    }\n\n    if (d.mode != null) {\n      m.mode = d.mode >>> 0;\n    }\n\n    if (d.mtime != null) {\n      if (typeof d.mtime !== 'object') throw TypeError('.Data.mtime: object expected');\n      m.mtime = $root.UnixTime.fromObject(d.mtime);\n    }\n\n    return m;\n  };\n\n  Data.toObject = function toObject(m, o) {\n    if (!o) o = {};\n    var d = {};\n\n    if (o.arrays || o.defaults) {\n      d.blocksizes = [];\n    }\n\n    if (o.defaults) {\n      d.Type = o.enums === String ? 'Raw' : 0;\n      if (o.bytes === String) d.Data = '';else {\n        d.Data = [];\n        if (o.bytes !== Array) d.Data = $util.newBuffer(d.Data);\n      }\n\n      if ($util.Long) {\n        var n = new $util.Long(0, 0, true);\n        d.filesize = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n      } else d.filesize = o.longs === String ? '0' : 0;\n\n      if ($util.Long) {\n        var n = new $util.Long(0, 0, true);\n        d.hashType = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n      } else d.hashType = o.longs === String ? '0' : 0;\n\n      if ($util.Long) {\n        var n = new $util.Long(0, 0, true);\n        d.fanout = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n      } else d.fanout = o.longs === String ? '0' : 0;\n\n      d.mode = 0;\n      d.mtime = null;\n    }\n\n    if (m.Type != null && m.hasOwnProperty('Type')) {\n      d.Type = o.enums === String ? $root.Data.DataType[m.Type] : m.Type;\n    }\n\n    if (m.Data != null && m.hasOwnProperty('Data')) {\n      d.Data = o.bytes === String ? $util.base64.encode(m.Data, 0, m.Data.length) : o.bytes === Array ? Array.prototype.slice.call(m.Data) : m.Data;\n    }\n\n    if (m.filesize != null && m.hasOwnProperty('filesize')) {\n      if (typeof m.filesize === 'number') d.filesize = o.longs === String ? String(m.filesize) : m.filesize;else d.filesize = o.longs === String ? $util.Long.prototype.toString.call(m.filesize) : o.longs === Number ? new $util.LongBits(m.filesize.low >>> 0, m.filesize.high >>> 0).toNumber(true) : m.filesize;\n    }\n\n    if (m.blocksizes && m.blocksizes.length) {\n      d.blocksizes = [];\n\n      for (var j = 0; j < m.blocksizes.length; ++j) {\n        if (typeof m.blocksizes[j] === 'number') d.blocksizes[j] = o.longs === String ? String(m.blocksizes[j]) : m.blocksizes[j];else d.blocksizes[j] = o.longs === String ? $util.Long.prototype.toString.call(m.blocksizes[j]) : o.longs === Number ? new $util.LongBits(m.blocksizes[j].low >>> 0, m.blocksizes[j].high >>> 0).toNumber(true) : m.blocksizes[j];\n      }\n    }\n\n    if (m.hashType != null && m.hasOwnProperty('hashType')) {\n      if (typeof m.hashType === 'number') d.hashType = o.longs === String ? String(m.hashType) : m.hashType;else d.hashType = o.longs === String ? $util.Long.prototype.toString.call(m.hashType) : o.longs === Number ? new $util.LongBits(m.hashType.low >>> 0, m.hashType.high >>> 0).toNumber(true) : m.hashType;\n    }\n\n    if (m.fanout != null && m.hasOwnProperty('fanout')) {\n      if (typeof m.fanout === 'number') d.fanout = o.longs === String ? String(m.fanout) : m.fanout;else d.fanout = o.longs === String ? $util.Long.prototype.toString.call(m.fanout) : o.longs === Number ? new $util.LongBits(m.fanout.low >>> 0, m.fanout.high >>> 0).toNumber(true) : m.fanout;\n    }\n\n    if (m.mode != null && m.hasOwnProperty('mode')) {\n      d.mode = m.mode;\n    }\n\n    if (m.mtime != null && m.hasOwnProperty('mtime')) {\n      d.mtime = $root.UnixTime.toObject(m.mtime, o);\n    }\n\n    return d;\n  };\n\n  Data.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf__default[\"default\"].util.toJSONOptions);\n  };\n\n  Data.DataType = function () {\n    var valuesById = {},\n        values = Object.create(valuesById);\n    values[valuesById[0] = 'Raw'] = 0;\n    values[valuesById[1] = 'Directory'] = 1;\n    values[valuesById[2] = 'File'] = 2;\n    values[valuesById[3] = 'Metadata'] = 3;\n    values[valuesById[4] = 'Symlink'] = 4;\n    values[valuesById[5] = 'HAMTShard'] = 5;\n    return values;\n  }();\n\n  return Data;\n}();\n\nvar UnixTime = $root.UnixTime = function () {\n  function UnixTime(p) {\n    if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {\n      if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];\n    }\n  }\n\n  UnixTime.prototype.Seconds = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n  UnixTime.prototype.FractionalNanoseconds = 0;\n\n  UnixTime.encode = function encode(m, w) {\n    if (!w) w = $Writer.create();\n    w.uint32(8).int64(m.Seconds);\n    if (m.FractionalNanoseconds != null && Object.hasOwnProperty.call(m, 'FractionalNanoseconds')) w.uint32(21).fixed32(m.FractionalNanoseconds);\n    return w;\n  };\n\n  UnixTime.decode = function decode(r, l) {\n    if (!(r instanceof $Reader)) r = $Reader.create(r);\n    var c = l === undefined ? r.len : r.pos + l,\n        m = new $root.UnixTime();\n\n    while (r.pos < c) {\n      var t = r.uint32();\n\n      switch (t >>> 3) {\n        case 1:\n          m.Seconds = r.int64();\n          break;\n\n        case 2:\n          m.FractionalNanoseconds = r.fixed32();\n          break;\n\n        default:\n          r.skipType(t & 7);\n          break;\n      }\n    }\n\n    if (!m.hasOwnProperty('Seconds')) throw $util.ProtocolError('missing required \\'Seconds\\'', {\n      instance: m\n    });\n    return m;\n  };\n\n  UnixTime.fromObject = function fromObject(d) {\n    if (d instanceof $root.UnixTime) return d;\n    var m = new $root.UnixTime();\n\n    if (d.Seconds != null) {\n      if ($util.Long) (m.Seconds = $util.Long.fromValue(d.Seconds)).unsigned = false;else if (typeof d.Seconds === 'string') m.Seconds = parseInt(d.Seconds, 10);else if (typeof d.Seconds === 'number') m.Seconds = d.Seconds;else if (typeof d.Seconds === 'object') m.Seconds = new $util.LongBits(d.Seconds.low >>> 0, d.Seconds.high >>> 0).toNumber();\n    }\n\n    if (d.FractionalNanoseconds != null) {\n      m.FractionalNanoseconds = d.FractionalNanoseconds >>> 0;\n    }\n\n    return m;\n  };\n\n  UnixTime.toObject = function toObject(m, o) {\n    if (!o) o = {};\n    var d = {};\n\n    if (o.defaults) {\n      if ($util.Long) {\n        var n = new $util.Long(0, 0, false);\n        d.Seconds = o.longs === String ? n.toString() : o.longs === Number ? n.toNumber() : n;\n      } else d.Seconds = o.longs === String ? '0' : 0;\n\n      d.FractionalNanoseconds = 0;\n    }\n\n    if (m.Seconds != null && m.hasOwnProperty('Seconds')) {\n      if (typeof m.Seconds === 'number') d.Seconds = o.longs === String ? String(m.Seconds) : m.Seconds;else d.Seconds = o.longs === String ? $util.Long.prototype.toString.call(m.Seconds) : o.longs === Number ? new $util.LongBits(m.Seconds.low >>> 0, m.Seconds.high >>> 0).toNumber() : m.Seconds;\n    }\n\n    if (m.FractionalNanoseconds != null && m.hasOwnProperty('FractionalNanoseconds')) {\n      d.FractionalNanoseconds = m.FractionalNanoseconds;\n    }\n\n    return d;\n  };\n\n  UnixTime.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf__default[\"default\"].util.toJSONOptions);\n  };\n\n  return UnixTime;\n}();\n\nvar Metadata = $root.Metadata = function () {\n  function Metadata(p) {\n    if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) {\n      if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];\n    }\n  }\n\n  Metadata.prototype.MimeType = '';\n\n  Metadata.encode = function encode(m, w) {\n    if (!w) w = $Writer.create();\n    if (m.MimeType != null && Object.hasOwnProperty.call(m, 'MimeType')) w.uint32(10).string(m.MimeType);\n    return w;\n  };\n\n  Metadata.decode = function decode(r, l) {\n    if (!(r instanceof $Reader)) r = $Reader.create(r);\n    var c = l === undefined ? r.len : r.pos + l,\n        m = new $root.Metadata();\n\n    while (r.pos < c) {\n      var t = r.uint32();\n\n      switch (t >>> 3) {\n        case 1:\n          m.MimeType = r.string();\n          break;\n\n        default:\n          r.skipType(t & 7);\n          break;\n      }\n    }\n\n    return m;\n  };\n\n  Metadata.fromObject = function fromObject(d) {\n    if (d instanceof $root.Metadata) return d;\n    var m = new $root.Metadata();\n\n    if (d.MimeType != null) {\n      m.MimeType = String(d.MimeType);\n    }\n\n    return m;\n  };\n\n  Metadata.toObject = function toObject(m, o) {\n    if (!o) o = {};\n    var d = {};\n\n    if (o.defaults) {\n      d.MimeType = '';\n    }\n\n    if (m.MimeType != null && m.hasOwnProperty('MimeType')) {\n      d.MimeType = m.MimeType;\n    }\n\n    return d;\n  };\n\n  Metadata.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf__default[\"default\"].util.toJSONOptions);\n  };\n\n  return Metadata;\n}();\n\nexports.Data = Data;\nexports.Metadata = Metadata;\nexports.UnixTime = UnixTime;\nexports[\"default\"] = $root;","map":null,"metadata":{},"sourceType":"script"}