{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar token = require('./token.js');\n\nvar _0uint = require('./0uint.js');\n\nvar common = require('./common.js');\n\nfunction decodeNegint8(data, pos, _minor, options) {\n  return new token.Token(token.Type.negint, -1 - _0uint.readUint8(data, pos + 1, options), 2);\n}\n\nfunction decodeNegint16(data, pos, _minor, options) {\n  return new token.Token(token.Type.negint, -1 - _0uint.readUint16(data, pos + 1, options), 3);\n}\n\nfunction decodeNegint32(data, pos, _minor, options) {\n  return new token.Token(token.Type.negint, -1 - _0uint.readUint32(data, pos + 1, options), 5);\n}\n\nvar neg1b = BigInt(-1);\nvar pos1b = BigInt(1);\n\nfunction decodeNegint64(data, pos, _minor, options) {\n  var int = _0uint.readUint64(data, pos + 1, options);\n\n  if (typeof int !== 'bigint') {\n    var value = -1 - int;\n\n    if (value >= Number.MIN_SAFE_INTEGER) {\n      return new token.Token(token.Type.negint, value, 9);\n    }\n  }\n\n  if (options.allowBigInt !== true) {\n    throw new Error(\"\".concat(common.decodeErrPrefix, \" integers outside of the safe integer range are not supported\"));\n  }\n\n  return new token.Token(token.Type.negint, neg1b - BigInt(int), 9);\n}\n\nfunction encodeNegint(buf, token) {\n  var negint = token.value;\n  var unsigned = typeof negint === 'bigint' ? negint * neg1b - pos1b : negint * -1 - 1;\n\n  _0uint.encodeUintValue(buf, token.type.majorEncoded, unsigned);\n}\n\nencodeNegint.encodedSize = function encodedSize(token) {\n  var negint = token.value;\n  var unsigned = typeof negint === 'bigint' ? negint * neg1b - pos1b : negint * -1 - 1;\n\n  if (unsigned < _0uint.uintBoundaries[0]) {\n    return 1;\n  }\n\n  if (unsigned < _0uint.uintBoundaries[1]) {\n    return 2;\n  }\n\n  if (unsigned < _0uint.uintBoundaries[2]) {\n    return 3;\n  }\n\n  if (unsigned < _0uint.uintBoundaries[3]) {\n    return 5;\n  }\n\n  return 9;\n};\n\nencodeNegint.compareTokens = function compareTokens(tok1, tok2) {\n  return tok1.value < tok2.value ? 1 : tok1.value > tok2.value ? -1 : 0;\n};\n\nexports.decodeNegint16 = decodeNegint16;\nexports.decodeNegint32 = decodeNegint32;\nexports.decodeNegint64 = decodeNegint64;\nexports.decodeNegint8 = decodeNegint8;\nexports.encodeNegint = encodeNegint;","map":null,"metadata":{},"sourceType":"script"}