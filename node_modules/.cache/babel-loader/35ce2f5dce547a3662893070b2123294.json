{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar fromString = require('uint8arrays/from-string');\n\nvar responseTypes = require('./response-types.js');\n\nvar multiaddr = require('multiaddr');\n\nvar mapEvent = function mapEvent(event) {\n  if (event.Type === responseTypes.SendingQuery) {\n    return {\n      to: event.ID,\n      name: 'SENDING_QUERY',\n      type: event.Type\n    };\n  }\n\n  if (event.Type === responseTypes.PeerResponse) {\n    return {\n      from: event.ID,\n      name: 'PEER_RESPONSE',\n      type: event.Type,\n      messageType: 0,\n      messageName: 'PUT_VALUE',\n      closer: (event.Responses || []).map(function (_ref) {\n        var ID = _ref.ID,\n            Addrs = _ref.Addrs;\n        return {\n          id: ID,\n          multiaddrs: Addrs.map(function (addr) {\n            return new multiaddr.Multiaddr(addr);\n          })\n        };\n      }),\n      providers: (event.Responses || []).map(function (_ref2) {\n        var ID = _ref2.ID,\n            Addrs = _ref2.Addrs;\n        return {\n          id: ID,\n          multiaddrs: Addrs.map(function (addr) {\n            return new multiaddr.Multiaddr(addr);\n          })\n        };\n      })\n    };\n  }\n\n  if (event.Type === responseTypes.FinalPeer) {\n    var peer = {\n      id: event.ID,\n      multiaddrs: []\n    };\n\n    if (event.Responses && event.Responses.length) {\n      peer = {\n        id: event.Responses[0].ID,\n        multiaddrs: event.Responses[0].Addrs.map(function (addr) {\n          return new multiaddr.Multiaddr(addr);\n        })\n      };\n    }\n\n    return {\n      from: event.ID,\n      name: 'FINAL_PEER',\n      type: event.Type,\n      peer: peer\n    };\n  }\n\n  if (event.Type === responseTypes.QueryError) {\n    return {\n      from: event.ID,\n      name: 'QUERY_ERROR',\n      type: event.Type,\n      error: new Error(event.Extra)\n    };\n  }\n\n  if (event.Type === responseTypes.Provider) {\n    return {\n      from: event.ID,\n      name: 'PROVIDER',\n      type: event.Type,\n      providers: event.Responses.map(function (_ref3) {\n        var ID = _ref3.ID,\n            Addrs = _ref3.Addrs;\n        return {\n          id: ID,\n          multiaddrs: Addrs.map(function (addr) {\n            return new multiaddr.Multiaddr(addr);\n          })\n        };\n      })\n    };\n  }\n\n  if (event.Type === responseTypes.Value) {\n    return {\n      from: event.ID,\n      name: 'VALUE',\n      type: event.Type,\n      value: fromString.fromString(event.Extra, 'base64pad')\n    };\n  }\n\n  if (event.Type === responseTypes.AddingPeer) {\n    var peers = event.Responses.map(function (_ref4) {\n      var ID = _ref4.ID;\n      return ID;\n    });\n\n    if (!peers.length) {\n      throw new Error('No peer found');\n    }\n\n    return {\n      name: 'ADDING_PEER',\n      type: event.Type,\n      peer: peers[0]\n    };\n  }\n\n  if (event.Type === responseTypes.DialingPeer) {\n    return {\n      name: 'DIALING_PEER',\n      type: event.Type,\n      peer: event.ID\n    };\n  }\n\n  throw new Error('Unknown DHT event type');\n};\n\nexports.mapEvent = mapEvent;","map":null,"metadata":{},"sourceType":"script"}