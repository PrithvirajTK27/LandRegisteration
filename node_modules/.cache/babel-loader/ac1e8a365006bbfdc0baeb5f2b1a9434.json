{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\prith\\\\Desktop\\\\New folder (5)\\\\starter_kit-master\\\\LandRegisteration\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _objectSpread = require(\"C:\\\\Users\\\\prith\\\\Desktop\\\\New folder (5)\\\\starter_kit-master\\\\LandRegisteration\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/objectSpread\");\n\nvar _awaitAsyncGenerator = require(\"C:\\\\Users\\\\prith\\\\Desktop\\\\New folder (5)\\\\starter_kit-master\\\\LandRegisteration\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"C:\\\\Users\\\\prith\\\\Desktop\\\\New folder (5)\\\\starter_kit-master\\\\LandRegisteration\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"C:\\\\Users\\\\prith\\\\Desktop\\\\New folder (5)\\\\starter_kit-master\\\\LandRegisteration\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncIterator\");\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar cid = require('multiformats/cid');\n\nvar objectToCamelWithMetadata = require('../lib/object-to-camel-with-metadata.js');\n\nvar configure = require('../lib/configure.js');\n\nvar toUrlSearchParams = require('../lib/to-url-search-params.js');\n\nvar createLs = configure.configure(function (api) {\n  function ls(_x) {\n    return _ls.apply(this, arguments);\n  }\n\n  function _ls() {\n    _ls = _wrapAsyncGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(path) {\n      var options,\n          res,\n          _iteratorNormalCompletion,\n          _didIteratorError,\n          _iteratorError,\n          _iterator,\n          _step,\n          _value,\n          result,\n          _iteratorNormalCompletion2,\n          _didIteratorError2,\n          _iteratorError2,\n          _iterator2,\n          _step2,\n          entry,\n          _args = arguments;\n\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n\n              if (path) {\n                _context.next = 3;\n                break;\n              }\n\n              throw new Error('ipfs.files.ls requires a path');\n\n            case 3:\n              _context.next = 5;\n              return _awaitAsyncGenerator(api.post('files/ls', {\n                signal: options.signal,\n                searchParams: toUrlSearchParams.toUrlSearchParams(_objectSpread({\n                  arg: cid.CID.asCID(path) ? \"/ipfs/\".concat(path) : path,\n                  long: true\n                }, options, {\n                  stream: true\n                })),\n                headers: options.headers\n              }));\n\n            case 5:\n              res = _context.sent;\n              _iteratorNormalCompletion = true;\n              _didIteratorError = false;\n              _context.prev = 8;\n              _iterator = _asyncIterator(res.ndjson());\n\n            case 10:\n              _context.next = 12;\n              return _awaitAsyncGenerator(_iterator.next());\n\n            case 12:\n              _step = _context.sent;\n              _iteratorNormalCompletion = _step.done;\n              _context.next = 16;\n              return _awaitAsyncGenerator(_step.value);\n\n            case 16:\n              _value = _context.sent;\n\n              if (_iteratorNormalCompletion) {\n                _context.next = 53;\n                break;\n              }\n\n              result = _value;\n\n              if (!('Entries' in result)) {\n                _context.next = 48;\n                break;\n              }\n\n              _iteratorNormalCompletion2 = true;\n              _didIteratorError2 = false;\n              _iteratorError2 = undefined;\n              _context.prev = 23;\n              _iterator2 = (result.Entries || [])[Symbol.iterator]();\n\n            case 25:\n              if (_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done) {\n                _context.next = 32;\n                break;\n              }\n\n              entry = _step2.value;\n              _context.next = 29;\n              return toCoreInterface(objectToCamelWithMetadata.objectToCamelWithMetadata(entry));\n\n            case 29:\n              _iteratorNormalCompletion2 = true;\n              _context.next = 25;\n              break;\n\n            case 32:\n              _context.next = 38;\n              break;\n\n            case 34:\n              _context.prev = 34;\n              _context.t0 = _context[\"catch\"](23);\n              _didIteratorError2 = true;\n              _iteratorError2 = _context.t0;\n\n            case 38:\n              _context.prev = 38;\n              _context.prev = 39;\n\n              if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n                _iterator2.return();\n              }\n\n            case 41:\n              _context.prev = 41;\n\n              if (!_didIteratorError2) {\n                _context.next = 44;\n                break;\n              }\n\n              throw _iteratorError2;\n\n            case 44:\n              return _context.finish(41);\n\n            case 45:\n              return _context.finish(38);\n\n            case 46:\n              _context.next = 50;\n              break;\n\n            case 48:\n              _context.next = 50;\n              return toCoreInterface(objectToCamelWithMetadata.objectToCamelWithMetadata(result));\n\n            case 50:\n              _iteratorNormalCompletion = true;\n              _context.next = 10;\n              break;\n\n            case 53:\n              _context.next = 59;\n              break;\n\n            case 55:\n              _context.prev = 55;\n              _context.t1 = _context[\"catch\"](8);\n              _didIteratorError = true;\n              _iteratorError = _context.t1;\n\n            case 59:\n              _context.prev = 59;\n              _context.prev = 60;\n\n              if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n                _context.next = 64;\n                break;\n              }\n\n              _context.next = 64;\n              return _awaitAsyncGenerator(_iterator.return());\n\n            case 64:\n              _context.prev = 64;\n\n              if (!_didIteratorError) {\n                _context.next = 67;\n                break;\n              }\n\n              throw _iteratorError;\n\n            case 67:\n              return _context.finish(64);\n\n            case 68:\n              return _context.finish(59);\n\n            case 69:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, null, [[8, 55, 59, 69], [23, 34, 38, 46], [39,, 41, 45], [60,, 64, 68]]);\n    }));\n    return _ls.apply(this, arguments);\n  }\n\n  return ls;\n});\n\nfunction toCoreInterface(entry) {\n  if (entry.hash) {\n    entry.cid = cid.CID.parse(entry.hash);\n  }\n\n  delete entry.hash;\n  entry.type = entry.type === 1 ? 'directory' : 'file';\n  return entry;\n}\n\nexports.createLs = createLs;","map":null,"metadata":{},"sourceType":"script"}