{"ast":null,"code":"'use strict';\n\nvar _regeneratorRuntime = require(\"C:\\\\Users\\\\prith\\\\Desktop\\\\New folder (5)\\\\starter_kit-master\\\\LandRegisteration\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\");\n\nvar _awaitAsyncGenerator = require(\"C:\\\\Users\\\\prith\\\\Desktop\\\\New folder (5)\\\\starter_kit-master\\\\LandRegisteration\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/awaitAsyncGenerator\");\n\nvar _wrapAsyncGenerator = require(\"C:\\\\Users\\\\prith\\\\Desktop\\\\New folder (5)\\\\starter_kit-master\\\\LandRegisteration\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/wrapAsyncGenerator\");\n\nvar _asyncIterator = require(\"C:\\\\Users\\\\prith\\\\Desktop\\\\New folder (5)\\\\starter_kit-master\\\\LandRegisteration\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/asyncIterator\");\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar errCode = require('err-code');\n\nvar cid = require('multiformats/cid');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nvar errCode__default =\n/*#__PURE__*/\n_interopDefaultLegacy(errCode);\n\nfunction normaliseInput(_x) {\n  return _normaliseInput.apply(this, arguments);\n}\n\nfunction _normaliseInput() {\n  _normaliseInput = _wrapAsyncGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(input) {\n    var cid$1, iterator, first, _iteratorNormalCompletion3, _didIteratorError3, _iteratorError3, _iterator3, _step3, _cid, _iteratorNormalCompletion4, _didIteratorError4, _iteratorError4, _iterator4, _step4, obj, _iterator5, _first, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, _value, _cid2, _iteratorNormalCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, _value2, _obj;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(input === null || input === undefined)) {\n              _context.next = 2;\n              break;\n            }\n\n            throw errCode__default[\"default\"](new Error(\"Unexpected input: \".concat(input)), 'ERR_UNEXPECTED_INPUT');\n\n          case 2:\n            cid$1 = cid.CID.asCID(input);\n\n            if (!cid$1) {\n              _context.next = 7;\n              break;\n            }\n\n            _context.next = 6;\n            return toPin({\n              cid: cid$1\n            });\n\n          case 6:\n            return _context.abrupt(\"return\");\n\n          case 7:\n            if (!(input instanceof String || typeof input === 'string')) {\n              _context.next = 11;\n              break;\n            }\n\n            _context.next = 10;\n            return toPin({\n              path: input\n            });\n\n          case 10:\n            return _context.abrupt(\"return\");\n\n          case 11:\n            if (!(input.cid != null || input.path != null)) {\n              _context.next = 15;\n              break;\n            }\n\n            _context.next = 14;\n            return toPin(input);\n\n          case 14:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 15:\n            if (!(Symbol.iterator in input)) {\n              _context.next = 81;\n              break;\n            }\n\n            iterator = input[Symbol.iterator]();\n            first = iterator.next();\n\n            if (!first.done) {\n              _context.next = 20;\n              break;\n            }\n\n            return _context.abrupt(\"return\", iterator);\n\n          case 20:\n            if (!(cid.CID.asCID(first.value) || first.value instanceof String || typeof first.value === 'string')) {\n              _context.next = 50;\n              break;\n            }\n\n            _context.next = 23;\n            return toPin({\n              cid: first.value\n            });\n\n          case 23:\n            _iteratorNormalCompletion3 = true;\n            _didIteratorError3 = false;\n            _iteratorError3 = undefined;\n            _context.prev = 26;\n            _iterator3 = iterator[Symbol.iterator]();\n\n          case 28:\n            if (_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done) {\n              _context.next = 35;\n              break;\n            }\n\n            _cid = _step3.value;\n            _context.next = 32;\n            return toPin({\n              cid: _cid\n            });\n\n          case 32:\n            _iteratorNormalCompletion3 = true;\n            _context.next = 28;\n            break;\n\n          case 35:\n            _context.next = 41;\n            break;\n\n          case 37:\n            _context.prev = 37;\n            _context.t0 = _context[\"catch\"](26);\n            _didIteratorError3 = true;\n            _iteratorError3 = _context.t0;\n\n          case 41:\n            _context.prev = 41;\n            _context.prev = 42;\n\n            if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n              _iterator3.return();\n            }\n\n          case 44:\n            _context.prev = 44;\n\n            if (!_didIteratorError3) {\n              _context.next = 47;\n              break;\n            }\n\n            throw _iteratorError3;\n\n          case 47:\n            return _context.finish(44);\n\n          case 48:\n            return _context.finish(41);\n\n          case 49:\n            return _context.abrupt(\"return\");\n\n          case 50:\n            if (!(first.value.cid != null || first.value.path != null)) {\n              _context.next = 80;\n              break;\n            }\n\n            _context.next = 53;\n            return toPin(first.value);\n\n          case 53:\n            _iteratorNormalCompletion4 = true;\n            _didIteratorError4 = false;\n            _iteratorError4 = undefined;\n            _context.prev = 56;\n            _iterator4 = iterator[Symbol.iterator]();\n\n          case 58:\n            if (_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done) {\n              _context.next = 65;\n              break;\n            }\n\n            obj = _step4.value;\n            _context.next = 62;\n            return toPin(obj);\n\n          case 62:\n            _iteratorNormalCompletion4 = true;\n            _context.next = 58;\n            break;\n\n          case 65:\n            _context.next = 71;\n            break;\n\n          case 67:\n            _context.prev = 67;\n            _context.t1 = _context[\"catch\"](56);\n            _didIteratorError4 = true;\n            _iteratorError4 = _context.t1;\n\n          case 71:\n            _context.prev = 71;\n            _context.prev = 72;\n\n            if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n              _iterator4.return();\n            }\n\n          case 74:\n            _context.prev = 74;\n\n            if (!_didIteratorError4) {\n              _context.next = 77;\n              break;\n            }\n\n            throw _iteratorError4;\n\n          case 77:\n            return _context.finish(74);\n\n          case 78:\n            return _context.finish(71);\n\n          case 79:\n            return _context.abrupt(\"return\");\n\n          case 80:\n            throw errCode__default[\"default\"](new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n\n          case 81:\n            if (!(Symbol.asyncIterator in input)) {\n              _context.next = 165;\n              break;\n            }\n\n            _iterator5 = input[Symbol.asyncIterator]();\n            _context.next = 85;\n            return _awaitAsyncGenerator(_iterator5.next());\n\n          case 85:\n            _first = _context.sent;\n\n            if (!_first.done) {\n              _context.next = 88;\n              break;\n            }\n\n            return _context.abrupt(\"return\", _iterator5);\n\n          case 88:\n            if (!(cid.CID.asCID(_first.value) || _first.value instanceof String || typeof _first.value === 'string')) {\n              _context.next = 126;\n              break;\n            }\n\n            _context.next = 91;\n            return toPin({\n              cid: _first.value\n            });\n\n          case 91:\n            _iteratorNormalCompletion = true;\n            _didIteratorError = false;\n            _context.prev = 93;\n            _iterator = _asyncIterator(_iterator5);\n\n          case 95:\n            _context.next = 97;\n            return _awaitAsyncGenerator(_iterator.next());\n\n          case 97:\n            _step = _context.sent;\n            _iteratorNormalCompletion = _step.done;\n            _context.next = 101;\n            return _awaitAsyncGenerator(_step.value);\n\n          case 101:\n            _value = _context.sent;\n\n            if (_iteratorNormalCompletion) {\n              _context.next = 109;\n              break;\n            }\n\n            _cid2 = _value;\n            _context.next = 106;\n            return toPin({\n              cid: _cid2\n            });\n\n          case 106:\n            _iteratorNormalCompletion = true;\n            _context.next = 95;\n            break;\n\n          case 109:\n            _context.next = 115;\n            break;\n\n          case 111:\n            _context.prev = 111;\n            _context.t2 = _context[\"catch\"](93);\n            _didIteratorError = true;\n            _iteratorError = _context.t2;\n\n          case 115:\n            _context.prev = 115;\n            _context.prev = 116;\n\n            if (!(!_iteratorNormalCompletion && _iterator.return != null)) {\n              _context.next = 120;\n              break;\n            }\n\n            _context.next = 120;\n            return _awaitAsyncGenerator(_iterator.return());\n\n          case 120:\n            _context.prev = 120;\n\n            if (!_didIteratorError) {\n              _context.next = 123;\n              break;\n            }\n\n            throw _iteratorError;\n\n          case 123:\n            return _context.finish(120);\n\n          case 124:\n            return _context.finish(115);\n\n          case 125:\n            return _context.abrupt(\"return\");\n\n          case 126:\n            if (!(_first.value.cid != null || _first.value.path != null)) {\n              _context.next = 164;\n              break;\n            }\n\n            _context.next = 129;\n            return toPin(_first.value);\n\n          case 129:\n            _iteratorNormalCompletion2 = true;\n            _didIteratorError2 = false;\n            _context.prev = 131;\n            _iterator2 = _asyncIterator(_iterator5);\n\n          case 133:\n            _context.next = 135;\n            return _awaitAsyncGenerator(_iterator2.next());\n\n          case 135:\n            _step2 = _context.sent;\n            _iteratorNormalCompletion2 = _step2.done;\n            _context.next = 139;\n            return _awaitAsyncGenerator(_step2.value);\n\n          case 139:\n            _value2 = _context.sent;\n\n            if (_iteratorNormalCompletion2) {\n              _context.next = 147;\n              break;\n            }\n\n            _obj = _value2;\n            _context.next = 144;\n            return toPin(_obj);\n\n          case 144:\n            _iteratorNormalCompletion2 = true;\n            _context.next = 133;\n            break;\n\n          case 147:\n            _context.next = 153;\n            break;\n\n          case 149:\n            _context.prev = 149;\n            _context.t3 = _context[\"catch\"](131);\n            _didIteratorError2 = true;\n            _iteratorError2 = _context.t3;\n\n          case 153:\n            _context.prev = 153;\n            _context.prev = 154;\n\n            if (!(!_iteratorNormalCompletion2 && _iterator2.return != null)) {\n              _context.next = 158;\n              break;\n            }\n\n            _context.next = 158;\n            return _awaitAsyncGenerator(_iterator2.return());\n\n          case 158:\n            _context.prev = 158;\n\n            if (!_didIteratorError2) {\n              _context.next = 161;\n              break;\n            }\n\n            throw _iteratorError2;\n\n          case 161:\n            return _context.finish(158);\n\n          case 162:\n            return _context.finish(153);\n\n          case 163:\n            return _context.abrupt(\"return\");\n\n          case 164:\n            throw errCode__default[\"default\"](new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n\n          case 165:\n            throw errCode__default[\"default\"](new Error('Unexpected input: ' + typeof input), 'ERR_UNEXPECTED_INPUT');\n\n          case 166:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[26, 37, 41, 49], [42,, 44, 48], [56, 67, 71, 79], [72,, 74, 78], [93, 111, 115, 125], [116,, 120, 124], [131, 149, 153, 163], [154,, 158, 162]]);\n  }));\n  return _normaliseInput.apply(this, arguments);\n}\n\nfunction toPin(input) {\n  var path = input.cid || \"\".concat(input.path);\n\n  if (!path) {\n    throw errCode__default[\"default\"](new Error('Unexpected input: Please path either a CID or an IPFS path'), 'ERR_UNEXPECTED_INPUT');\n  }\n\n  var pin = {\n    path: path,\n    recursive: input.recursive !== false\n  };\n\n  if (input.metadata != null) {\n    pin.metadata = input.metadata;\n  }\n\n  return pin;\n}\n\nexports.normaliseInput = normaliseInput;","map":null,"metadata":{},"sourceType":"script"}