{"ast":null,"code":"'use strict';\n\nvar _toConsumableArray = require(\"C:\\\\Users\\\\prith\\\\Desktop\\\\New folder (5)\\\\starter_kit-master\\\\LandRegisteration\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/toConsumableArray\");\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\prith\\\\Desktop\\\\New folder (5)\\\\starter_kit-master\\\\LandRegisteration\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\prith\\\\Desktop\\\\New folder (5)\\\\starter_kit-master\\\\LandRegisteration\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar decode$1 = require('../decode.js');\n\nvar token = require('../token.js');\n\nvar byteUtils = require('../byte-utils.js');\n\nvar common = require('../common.js');\n\nvar Tokenizer =\n/*#__PURE__*/\nfunction () {\n  function Tokenizer(data) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Tokenizer);\n\n    this.pos = 0;\n    this.data = data;\n    this.options = options;\n    this.modeStack = ['value'];\n    this.lastToken = '';\n  }\n\n  _createClass(Tokenizer, [{\n    key: \"done\",\n    value: function done() {\n      return this.pos >= this.data.length;\n    }\n  }, {\n    key: \"ch\",\n    value: function ch() {\n      return this.data[this.pos];\n    }\n  }, {\n    key: \"currentMode\",\n    value: function currentMode() {\n      return this.modeStack[this.modeStack.length - 1];\n    }\n  }, {\n    key: \"skipWhitespace\",\n    value: function skipWhitespace() {\n      var c = this.ch();\n\n      while (c === 32 || c === 9 || c === 13 || c === 10) {\n        c = this.data[++this.pos];\n      }\n    }\n  }, {\n    key: \"expect\",\n    value: function expect(str) {\n      if (this.data.length - this.pos < str.length) {\n        throw new Error(\"\".concat(common.decodeErrPrefix, \" unexpected end of input at position \").concat(this.pos));\n      }\n\n      for (var i = 0; i < str.length; i++) {\n        if (this.data[this.pos++] !== str[i]) {\n          throw new Error(\"\".concat(common.decodeErrPrefix, \" unexpected token at position \").concat(this.pos, \", expected to find '\").concat(String.fromCharCode.apply(String, _toConsumableArray(str)), \"'\"));\n        }\n      }\n    }\n  }, {\n    key: \"parseNumber\",\n    value: function parseNumber() {\n      var _this = this;\n\n      var startPos = this.pos;\n      var negative = false;\n      var float = false;\n\n      var swallow = function swallow(chars) {\n        while (!_this.done()) {\n          var ch = _this.ch();\n\n          if (chars.includes(ch)) {\n            _this.pos++;\n          } else {\n            break;\n          }\n        }\n      };\n\n      if (this.ch() === 45) {\n        negative = true;\n        this.pos++;\n      }\n\n      if (this.ch() === 48) {\n        this.pos++;\n\n        if (this.ch() === 46) {\n          this.pos++;\n          float = true;\n        } else {\n          return new token.Token(token.Type.uint, 0, this.pos - startPos);\n        }\n      }\n\n      swallow([48, 49, 50, 51, 52, 53, 54, 55, 56, 57]);\n\n      if (negative && this.pos === startPos + 1) {\n        throw new Error(\"\".concat(common.decodeErrPrefix, \" unexpected token at position \").concat(this.pos));\n      }\n\n      if (!this.done() && this.ch() === 46) {\n        if (float) {\n          throw new Error(\"\".concat(common.decodeErrPrefix, \" unexpected token at position \").concat(this.pos));\n        }\n\n        float = true;\n        this.pos++;\n        swallow([48, 49, 50, 51, 52, 53, 54, 55, 56, 57]);\n      }\n\n      if (!this.done() && (this.ch() === 101 || this.ch() === 69)) {\n        float = true;\n        this.pos++;\n\n        if (!this.done() && (this.ch() === 43 || this.ch() === 45)) {\n          this.pos++;\n        }\n\n        swallow([48, 49, 50, 51, 52, 53, 54, 55, 56, 57]);\n      }\n\n      var numStr = String.fromCharCode.apply(null, this.data.subarray(startPos, this.pos));\n      var num = parseFloat(numStr);\n\n      if (float) {\n        return new token.Token(token.Type.float, num, this.pos - startPos);\n      }\n\n      if (this.options.allowBigInt !== true || Number.isSafeInteger(num)) {\n        return new token.Token(num >= 0 ? token.Type.uint : token.Type.negint, num, this.pos - startPos);\n      }\n\n      return new token.Token(num >= 0 ? token.Type.uint : token.Type.negint, BigInt(numStr), this.pos - startPos);\n    }\n  }, {\n    key: \"parseString\",\n    value: function parseString() {\n      var _this2 = this;\n\n      if (this.ch() !== 34) {\n        throw new Error(\"\".concat(common.decodeErrPrefix, \" unexpected character at position \").concat(this.pos, \"; this shouldn't happen\"));\n      }\n\n      this.pos++;\n\n      for (var i = this.pos, l = 0; i < this.data.length && l < 65536; i++, l++) {\n        var ch = this.data[i];\n\n        if (ch === 92 || ch < 32 || ch >= 128) {\n          break;\n        }\n\n        if (ch === 34) {\n          var str = String.fromCharCode.apply(null, this.data.subarray(this.pos, i));\n          this.pos = i + 1;\n          return new token.Token(token.Type.string, str, l);\n        }\n      }\n\n      var startPos = this.pos;\n      var chars = [];\n\n      var readu4 = function readu4() {\n        if (_this2.pos + 4 >= _this2.data.length) {\n          throw new Error(\"\".concat(common.decodeErrPrefix, \" unexpected end of unicode escape sequence at position \").concat(_this2.pos));\n        }\n\n        var u4 = 0;\n\n        for (var _i = 0; _i < 4; _i++) {\n          var _ch = _this2.ch();\n\n          if (_ch >= 48 && _ch <= 57) {\n            _ch -= 48;\n          } else if (_ch >= 97 && _ch <= 102) {\n            _ch = _ch - 97 + 10;\n          } else if (_ch >= 65 && _ch <= 70) {\n            _ch = _ch - 65 + 10;\n          } else {\n            throw new Error(\"\".concat(common.decodeErrPrefix, \" unexpected unicode escape character at position \").concat(_this2.pos));\n          }\n\n          u4 = u4 * 16 + _ch;\n          _this2.pos++;\n        }\n\n        return u4;\n      };\n\n      var readUtf8Char = function readUtf8Char() {\n        var firstByte = _this2.ch();\n\n        var codePoint = null;\n        var bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;\n\n        if (_this2.pos + bytesPerSequence > _this2.data.length) {\n          throw new Error(\"\".concat(common.decodeErrPrefix, \" unexpected unicode sequence at position \").concat(_this2.pos));\n        }\n\n        var secondByte, thirdByte, fourthByte, tempCodePoint;\n\n        switch (bytesPerSequence) {\n          case 1:\n            if (firstByte < 128) {\n              codePoint = firstByte;\n            }\n\n            break;\n\n          case 2:\n            secondByte = _this2.data[_this2.pos + 1];\n\n            if ((secondByte & 192) === 128) {\n              tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;\n\n              if (tempCodePoint > 127) {\n                codePoint = tempCodePoint;\n              }\n            }\n\n            break;\n\n          case 3:\n            secondByte = _this2.data[_this2.pos + 1];\n            thirdByte = _this2.data[_this2.pos + 2];\n\n            if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {\n              tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;\n\n              if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) {\n                codePoint = tempCodePoint;\n              }\n            }\n\n            break;\n\n          case 4:\n            secondByte = _this2.data[_this2.pos + 1];\n            thirdByte = _this2.data[_this2.pos + 2];\n            fourthByte = _this2.data[_this2.pos + 3];\n\n            if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {\n              tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;\n\n              if (tempCodePoint > 65535 && tempCodePoint < 1114112) {\n                codePoint = tempCodePoint;\n              }\n            }\n\n        }\n\n        if (codePoint === null) {\n          codePoint = 65533;\n          bytesPerSequence = 1;\n        } else if (codePoint > 65535) {\n          codePoint -= 65536;\n          chars.push(codePoint >>> 10 & 1023 | 55296);\n          codePoint = 56320 | codePoint & 1023;\n        }\n\n        chars.push(codePoint);\n        _this2.pos += bytesPerSequence;\n      };\n\n      while (!this.done()) {\n        var _ch2 = this.ch();\n\n        var ch1 = void 0;\n\n        switch (_ch2) {\n          case 92:\n            this.pos++;\n\n            if (this.done()) {\n              throw new Error(\"\".concat(common.decodeErrPrefix, \" unexpected string termination at position \").concat(this.pos));\n            }\n\n            ch1 = this.ch();\n            this.pos++;\n\n            switch (ch1) {\n              case 34:\n              case 39:\n              case 92:\n              case 47:\n                chars.push(ch1);\n                break;\n\n              case 98:\n                chars.push(8);\n                break;\n\n              case 116:\n                chars.push(9);\n                break;\n\n              case 110:\n                chars.push(10);\n                break;\n\n              case 102:\n                chars.push(12);\n                break;\n\n              case 114:\n                chars.push(13);\n                break;\n\n              case 117:\n                chars.push(readu4());\n                break;\n\n              default:\n                throw new Error(\"\".concat(common.decodeErrPrefix, \" unexpected string escape character at position \").concat(this.pos));\n            }\n\n            break;\n\n          case 34:\n            this.pos++;\n            return new token.Token(token.Type.string, byteUtils.decodeCodePointsArray(chars), this.pos - startPos);\n\n          default:\n            if (_ch2 < 32) {\n              throw new Error(\"\".concat(common.decodeErrPrefix, \" invalid control character at position \").concat(this.pos));\n            } else if (_ch2 < 128) {\n              chars.push(_ch2);\n              this.pos++;\n            } else {\n              readUtf8Char();\n            }\n\n        }\n      }\n\n      throw new Error(\"\".concat(common.decodeErrPrefix, \" unexpected end of string at position \").concat(this.pos));\n    }\n  }, {\n    key: \"parseValue\",\n    value: function parseValue() {\n      switch (this.ch()) {\n        case 123:\n          this.modeStack.push('obj-start');\n          this.pos++;\n          return new token.Token(token.Type.map, Infinity, 1);\n\n        case 91:\n          this.modeStack.push('array-start');\n          this.pos++;\n          return new token.Token(token.Type.array, Infinity, 1);\n\n        case 34:\n          {\n            return this.parseString();\n          }\n\n        case 110:\n          this.expect([110, 117, 108, 108]);\n          return new token.Token(token.Type.null, null, 4);\n\n        case 102:\n          this.expect([102, 97, 108, 115, 101]);\n          return new token.Token(token.Type.false, false, 5);\n\n        case 116:\n          this.expect([116, 114, 117, 101]);\n          return new token.Token(token.Type.true, true, 4);\n\n        case 45:\n        case 48:\n        case 49:\n        case 50:\n        case 51:\n        case 52:\n        case 53:\n        case 54:\n        case 55:\n        case 56:\n        case 57:\n          return this.parseNumber();\n\n        default:\n          throw new Error(\"\".concat(common.decodeErrPrefix, \" unexpected character at position \").concat(this.pos));\n      }\n    }\n  }, {\n    key: \"next\",\n    value: function next() {\n      this.skipWhitespace();\n\n      switch (this.currentMode()) {\n        case 'value':\n          this.modeStack.pop();\n          return this.parseValue();\n\n        case 'array-value':\n          {\n            this.modeStack.pop();\n\n            if (this.ch() === 93) {\n              this.pos++;\n              this.skipWhitespace();\n              return new token.Token(token.Type.break, undefined, 1);\n            }\n\n            if (this.ch() !== 44) {\n              throw new Error(\"\".concat(common.decodeErrPrefix, \" unexpected character at position \").concat(this.pos, \", was expecting array delimiter but found '\").concat(String.fromCharCode(this.ch()), \"'\"));\n            }\n\n            this.pos++;\n            this.modeStack.push('array-value');\n            this.skipWhitespace();\n            return this.parseValue();\n          }\n\n        case 'array-start':\n          {\n            this.modeStack.pop();\n\n            if (this.ch() === 93) {\n              this.pos++;\n              this.skipWhitespace();\n              return new token.Token(token.Type.break, undefined, 1);\n            }\n\n            this.modeStack.push('array-value');\n            this.skipWhitespace();\n            return this.parseValue();\n          }\n\n        case 'obj-key':\n          if (this.ch() === 125) {\n            this.modeStack.pop();\n            this.pos++;\n            this.skipWhitespace();\n            return new token.Token(token.Type.break, undefined, 1);\n          }\n\n          if (this.ch() !== 44) {\n            throw new Error(\"\".concat(common.decodeErrPrefix, \" unexpected character at position \").concat(this.pos, \", was expecting object delimiter but found '\").concat(String.fromCharCode(this.ch()), \"'\"));\n          }\n\n          this.pos++;\n          this.skipWhitespace();\n\n        case 'obj-start':\n          {\n            this.modeStack.pop();\n\n            if (this.ch() === 125) {\n              this.pos++;\n              this.skipWhitespace();\n              return new token.Token(token.Type.break, undefined, 1);\n            }\n\n            var token$1 = this.parseString();\n            this.skipWhitespace();\n\n            if (this.ch() !== 58) {\n              throw new Error(\"\".concat(common.decodeErrPrefix, \" unexpected character at position \").concat(this.pos, \", was expecting key/value delimiter ':' but found '\").concat(String.fromCharCode(this.ch()), \"'\"));\n            }\n\n            this.pos++;\n            this.modeStack.push('obj-value');\n            return token$1;\n          }\n\n        case 'obj-value':\n          {\n            this.modeStack.pop();\n            this.modeStack.push('obj-key');\n            this.skipWhitespace();\n            return this.parseValue();\n          }\n\n        default:\n          throw new Error(\"\".concat(common.decodeErrPrefix, \" unexpected parse state at position \").concat(this.pos, \"; this shouldn't happen\"));\n      }\n    }\n  }]);\n\n  return Tokenizer;\n}();\n\nfunction decode(data, options) {\n  options = Object.assign({\n    tokenizer: new Tokenizer(data, options)\n  }, options);\n  return decode$1.decode(data, options);\n}\n\nexports.Tokenizer = Tokenizer;\nexports.decode = decode;","map":null,"metadata":{},"sourceType":"script"}