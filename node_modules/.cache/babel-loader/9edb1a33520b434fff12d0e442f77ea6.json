{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar multibases = require('ipfs-core-utils/multibases');\n\nvar multicodecs = require('ipfs-core-utils/multicodecs');\n\nvar multihashes = require('ipfs-core-utils/multihashes');\n\nvar dagPB = require('@ipld/dag-pb');\n\nvar dagCBOR = require('@ipld/dag-cbor');\n\nvar dagJSON = require('@ipld/dag-json');\n\nvar dagJOSE = require('dag-jose');\n\nvar identity = require('multiformats/hashes/identity');\n\nvar basics = require('multiformats/basics');\n\nvar index = require('./bitswap/index.js');\n\nvar index$1 = require('./block/index.js');\n\nvar index$2 = require('./bootstrap/index.js');\n\nvar index$3 = require('./config/index.js');\n\nvar index$4 = require('./dag/index.js');\n\nvar index$5 = require('./dht/index.js');\n\nvar index$6 = require('./diag/index.js');\n\nvar index$7 = require('./files/index.js');\n\nvar index$8 = require('./key/index.js');\n\nvar index$9 = require('./log/index.js');\n\nvar index$a = require('./name/index.js');\n\nvar index$b = require('./object/index.js');\n\nvar index$c = require('./pin/index.js');\n\nvar index$d = require('./pubsub/index.js');\n\nvar index$e = require('./refs/index.js');\n\nvar index$f = require('./repo/index.js');\n\nvar index$g = require('./stats/index.js');\n\nvar index$h = require('./swarm/index.js');\n\nvar add = require('./add.js');\n\nvar addAll = require('./add-all.js');\n\nvar cat = require('./cat.js');\n\nvar commands = require('./commands.js');\n\nvar dns = require('./dns.js');\n\nvar getEndpointConfig = require('./get-endpoint-config.js');\n\nvar get = require('./get.js');\n\nvar id = require('./id.js');\n\nvar isOnline = require('./is-online.js');\n\nvar ls = require('./ls.js');\n\nvar mount = require('./mount.js');\n\nvar ping = require('./ping.js');\n\nvar resolve = require('./resolve.js');\n\nvar start = require('./start.js');\n\nvar stop = require('./stop.js');\n\nvar version = require('./version.js');\n\nvar globSourceImport = require('ipfs-utils/src/files/glob-source.js');\n\nvar cid = require('multiformats/cid');\n\nvar multiaddr = require('multiaddr');\n\nvar urlSource_js = require('ipfs-utils/src/files/url-source.js');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nfunction _interopNamespace(e) {\n  if (e && e.__esModule) return e;\n  var n = Object.create(null);\n\n  if (e) {\n    Object.keys(e).forEach(function (k) {\n      if (k !== 'default') {\n        var d = Object.getOwnPropertyDescriptor(e, k);\n        Object.defineProperty(n, k, d.get ? d : {\n          enumerable: true,\n          get: function get() {\n            return e[k];\n          }\n        });\n      }\n    });\n  }\n\n  n[\"default\"] = e;\n  return Object.freeze(n);\n}\n\nvar dagPB__namespace =\n/*#__PURE__*/\n_interopNamespace(dagPB);\n\nvar dagCBOR__namespace =\n/*#__PURE__*/\n_interopNamespace(dagCBOR);\n\nvar dagJSON__namespace =\n/*#__PURE__*/\n_interopNamespace(dagJSON);\n\nvar dagJOSE__namespace =\n/*#__PURE__*/\n_interopNamespace(dagJOSE);\n\nvar globSourceImport__default =\n/*#__PURE__*/\n_interopDefaultLegacy(globSourceImport);\n\nvar urlSource_js__default =\n/*#__PURE__*/\n_interopDefaultLegacy(urlSource_js);\n\nfunction create() {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  var id$1 = {\n    name: identity.identity.name,\n    code: identity.identity.code,\n    encode: function encode(id) {\n      return id;\n    },\n    decode: function decode(id) {\n      return id;\n    }\n  };\n  var multibaseCodecs = Object.values(basics.bases);\n  (options.ipld && options.ipld.bases ? options.ipld.bases : []).forEach(function (base) {\n    return multibaseCodecs.push(base);\n  });\n  var multibases$1 = new multibases.Multibases({\n    bases: multibaseCodecs,\n    loadBase: options.ipld && options.ipld.loadBase\n  });\n  var blockCodecs = Object.values(basics.codecs);\n  [dagPB__namespace, dagCBOR__namespace, dagJSON__namespace, dagJOSE__namespace, id$1].concat(options.ipld && options.ipld.codecs || []).forEach(function (codec) {\n    return blockCodecs.push(codec);\n  });\n  var multicodecs$1 = new multicodecs.Multicodecs({\n    codecs: blockCodecs,\n    loadCodec: options.ipld && options.ipld.loadCodec\n  });\n  var multihashHashers = Object.values(basics.hashes);\n  (options.ipld && options.ipld.hashers ? options.ipld.hashers : []).forEach(function (hasher) {\n    return multihashHashers.push(hasher);\n  });\n  var multihashes$1 = new multihashes.Multihashes({\n    hashers: multihashHashers,\n    loadHasher: options.ipld && options.ipld.loadHasher\n  });\n  var client = {\n    add: add.createAdd(options),\n    addAll: addAll.createAddAll(options),\n    bitswap: index.createBitswap(options),\n    block: index$1.createBlock(options),\n    bootstrap: index$2.createBootstrap(options),\n    cat: cat.createCat(options),\n    commands: commands.createCommands(options),\n    config: index$3.createConfig(options),\n    dag: index$4.createDag(multicodecs$1, options),\n    dht: index$5.createDht(options),\n    diag: index$6.createDiag(options),\n    dns: dns.createDns(options),\n    files: index$7.createFiles(options),\n    get: get.createGet(options),\n    getEndpointConfig: getEndpointConfig.createGetEndpointConfig(options),\n    id: id.createId(options),\n    isOnline: isOnline.createIsOnline(options),\n    key: index$8.createKey(options),\n    log: index$9.createLog(options),\n    ls: ls.createLs(options),\n    mount: mount.createMount(options),\n    name: index$a.createName(options),\n    object: index$b.createObject(multicodecs$1, options),\n    pin: index$c.createPin(options),\n    ping: ping.createPing(options),\n    pubsub: index$d.createPubsub(options),\n    refs: index$e.createRefs(options),\n    repo: index$f.createRepo(options),\n    resolve: resolve.createResolve(options),\n    start: start.createStart(options),\n    stats: index$g.createStats(options),\n    stop: stop.createStop(options),\n    swarm: index$h.createSwarm(options),\n    version: version.createVersion(options),\n    bases: multibases$1,\n    codecs: multicodecs$1,\n    hashers: multihashes$1\n  };\n  return client;\n}\n\nvar globSource = globSourceImport__default[\"default\"];\nObject.defineProperty(exports, 'CID', {\n  enumerable: true,\n  get: function get() {\n    return cid.CID;\n  }\n});\nObject.defineProperty(exports, 'multiaddr', {\n  enumerable: true,\n  get: function get() {\n    return multiaddr.Multiaddr;\n  }\n});\nObject.defineProperty(exports, 'urlSource', {\n  enumerable: true,\n  get: function get() {\n    return urlSource_js__default[\"default\"];\n  }\n});\nexports.create = create;\nexports.globSource = globSource;","map":null,"metadata":{},"sourceType":"script"}