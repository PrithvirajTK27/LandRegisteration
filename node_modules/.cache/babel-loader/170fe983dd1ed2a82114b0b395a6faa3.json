{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar token = require('./token.js');\n\nvar common = require('./common.js');\n\nvar uintBoundaries = [24, 256, 65536, 4294967296, BigInt('18446744073709551616')];\n\nfunction readUint8(data, offset, options) {\n  common.assertEnoughData(data, offset, 1);\n  var value = data[offset];\n\n  if (options.strict === true && value < uintBoundaries[0]) {\n    throw new Error(\"\".concat(common.decodeErrPrefix, \" integer encoded in more bytes than necessary (strict decode)\"));\n  }\n\n  return value;\n}\n\nfunction readUint16(data, offset, options) {\n  common.assertEnoughData(data, offset, 2);\n  var value = data[offset] << 8 | data[offset + 1];\n\n  if (options.strict === true && value < uintBoundaries[1]) {\n    throw new Error(\"\".concat(common.decodeErrPrefix, \" integer encoded in more bytes than necessary (strict decode)\"));\n  }\n\n  return value;\n}\n\nfunction readUint32(data, offset, options) {\n  common.assertEnoughData(data, offset, 4);\n  var value = data[offset] * 16777216 + (data[offset + 1] << 16) + (data[offset + 2] << 8) + data[offset + 3];\n\n  if (options.strict === true && value < uintBoundaries[2]) {\n    throw new Error(\"\".concat(common.decodeErrPrefix, \" integer encoded in more bytes than necessary (strict decode)\"));\n  }\n\n  return value;\n}\n\nfunction readUint64(data, offset, options) {\n  common.assertEnoughData(data, offset, 8);\n  var hi = data[offset] * 16777216 + (data[offset + 1] << 16) + (data[offset + 2] << 8) + data[offset + 3];\n  var lo = data[offset + 4] * 16777216 + (data[offset + 5] << 16) + (data[offset + 6] << 8) + data[offset + 7];\n  var value = (BigInt(hi) << BigInt(32)) + BigInt(lo);\n\n  if (options.strict === true && value < uintBoundaries[3]) {\n    throw new Error(\"\".concat(common.decodeErrPrefix, \" integer encoded in more bytes than necessary (strict decode)\"));\n  }\n\n  if (value <= Number.MAX_SAFE_INTEGER) {\n    return Number(value);\n  }\n\n  if (options.allowBigInt === true) {\n    return value;\n  }\n\n  throw new Error(\"\".concat(common.decodeErrPrefix, \" integers outside of the safe integer range are not supported\"));\n}\n\nfunction decodeUint8(data, pos, _minor, options) {\n  return new token.Token(token.Type.uint, readUint8(data, pos + 1, options), 2);\n}\n\nfunction decodeUint16(data, pos, _minor, options) {\n  return new token.Token(token.Type.uint, readUint16(data, pos + 1, options), 3);\n}\n\nfunction decodeUint32(data, pos, _minor, options) {\n  return new token.Token(token.Type.uint, readUint32(data, pos + 1, options), 5);\n}\n\nfunction decodeUint64(data, pos, _minor, options) {\n  return new token.Token(token.Type.uint, readUint64(data, pos + 1, options), 9);\n}\n\nfunction encodeUint(buf, token) {\n  return encodeUintValue(buf, 0, token.value);\n}\n\nfunction encodeUintValue(buf, major, uint) {\n  if (uint < uintBoundaries[0]) {\n    var nuint = Number(uint);\n    buf.push([major | nuint]);\n  } else if (uint < uintBoundaries[1]) {\n    var _nuint = Number(uint);\n\n    buf.push([major | 24, _nuint]);\n  } else if (uint < uintBoundaries[2]) {\n    var _nuint2 = Number(uint);\n\n    buf.push([major | 25, _nuint2 >>> 8, _nuint2 & 255]);\n  } else if (uint < uintBoundaries[3]) {\n    var _nuint3 = Number(uint);\n\n    buf.push([major | 26, _nuint3 >>> 24 & 255, _nuint3 >>> 16 & 255, _nuint3 >>> 8 & 255, _nuint3 & 255]);\n  } else {\n    var buint = BigInt(uint);\n\n    if (buint < uintBoundaries[4]) {\n      var set = [major | 27, 0, 0, 0, 0, 0, 0, 0];\n      var lo = Number(buint & BigInt(4294967295));\n      var hi = Number(buint >> BigInt(32) & BigInt(4294967295));\n      set[8] = lo & 255;\n      lo = lo >> 8;\n      set[7] = lo & 255;\n      lo = lo >> 8;\n      set[6] = lo & 255;\n      lo = lo >> 8;\n      set[5] = lo & 255;\n      set[4] = hi & 255;\n      hi = hi >> 8;\n      set[3] = hi & 255;\n      hi = hi >> 8;\n      set[2] = hi & 255;\n      hi = hi >> 8;\n      set[1] = hi & 255;\n      buf.push(set);\n    } else {\n      throw new Error(\"\".concat(common.decodeErrPrefix, \" encountered BigInt larger than allowable range\"));\n    }\n  }\n}\n\nencodeUint.encodedSize = function encodedSize(token) {\n  return encodeUintValue.encodedSize(token.value);\n};\n\nencodeUintValue.encodedSize = function encodedSize(uint) {\n  if (uint < uintBoundaries[0]) {\n    return 1;\n  }\n\n  if (uint < uintBoundaries[1]) {\n    return 2;\n  }\n\n  if (uint < uintBoundaries[2]) {\n    return 3;\n  }\n\n  if (uint < uintBoundaries[3]) {\n    return 5;\n  }\n\n  return 9;\n};\n\nencodeUint.compareTokens = function compareTokens(tok1, tok2) {\n  return tok1.value < tok2.value ? -1 : tok1.value > tok2.value ? 1 : 0;\n};\n\nexports.decodeUint16 = decodeUint16;\nexports.decodeUint32 = decodeUint32;\nexports.decodeUint64 = decodeUint64;\nexports.decodeUint8 = decodeUint8;\nexports.encodeUint = encodeUint;\nexports.encodeUintValue = encodeUintValue;\nexports.readUint16 = readUint16;\nexports.readUint32 = readUint32;\nexports.readUint64 = readUint64;\nexports.readUint8 = readUint8;\nexports.uintBoundaries = uintBoundaries;","map":null,"metadata":{},"sourceType":"script"}