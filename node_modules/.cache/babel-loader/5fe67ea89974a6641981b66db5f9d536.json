{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"C:\\\\Users\\\\prith\\\\Desktop\\\\New folder (5)\\\\starter_kit-master\\\\LandRegisteration\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:\\\\Users\\\\prith\\\\Desktop\\\\New folder (5)\\\\starter_kit-master\\\\LandRegisteration\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/createClass\");\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar is = require('./is.js');\n\nvar token = require('./token.js');\n\nvar bl = require('./bl.js');\n\nvar common = require('./common.js');\n\nvar jump = require('./jump.js');\n\nvar byteUtils = require('./byte-utils.js');\n\nvar _0uint = require('./0uint.js');\n\nvar _1negint = require('./1negint.js');\n\nvar _2bytes = require('./2bytes.js');\n\nvar _3string = require('./3string.js');\n\nvar _4array = require('./4array.js');\n\nvar _5map = require('./5map.js');\n\nvar _6tag = require('./6tag.js');\n\nvar _7float = require('./7float.js');\n\nvar defaultEncodeOptions = {\n  float64: false,\n  mapSorter: mapSorter,\n  quickEncodeToken: jump.quickEncodeToken\n};\n\nfunction makeCborEncoders() {\n  var encoders = [];\n  encoders[token.Type.uint.major] = _0uint.encodeUint;\n  encoders[token.Type.negint.major] = _1negint.encodeNegint;\n  encoders[token.Type.bytes.major] = _2bytes.encodeBytes;\n  encoders[token.Type.string.major] = _3string.encodeString;\n  encoders[token.Type.array.major] = _4array.encodeArray;\n  encoders[token.Type.map.major] = _5map.encodeMap;\n  encoders[token.Type.tag.major] = _6tag.encodeTag;\n  encoders[token.Type.float.major] = _7float.encodeFloat;\n  return encoders;\n}\n\nvar cborEncoders = makeCborEncoders();\nvar buf = new bl.Bl();\n\nvar Ref =\n/*#__PURE__*/\nfunction () {\n  function Ref(obj, parent) {\n    _classCallCheck(this, Ref);\n\n    this.obj = obj;\n    this.parent = parent;\n  }\n\n  _createClass(Ref, [{\n    key: \"includes\",\n    value: function includes(obj) {\n      var p = this;\n\n      do {\n        if (p.obj === obj) {\n          return true;\n        }\n      } while (p = p.parent);\n\n      return false;\n    }\n  }], [{\n    key: \"createCheck\",\n    value: function createCheck(stack, obj) {\n      if (stack && stack.includes(obj)) {\n        throw new Error(\"\".concat(common.encodeErrPrefix, \" object contains circular references\"));\n      }\n\n      return new Ref(obj, stack);\n    }\n  }]);\n\n  return Ref;\n}();\n\nvar simpleTokens = {\n  null: new token.Token(token.Type.null, null),\n  undefined: new token.Token(token.Type.undefined, undefined),\n  true: new token.Token(token.Type.true, true),\n  false: new token.Token(token.Type.false, false),\n  emptyArray: new token.Token(token.Type.array, 0),\n  emptyMap: new token.Token(token.Type.map, 0)\n};\nvar typeEncoders = {\n  number: function number(obj, _typ, _options, _refStack) {\n    if (!Number.isInteger(obj) || !Number.isSafeInteger(obj)) {\n      return new token.Token(token.Type.float, obj);\n    } else if (obj >= 0) {\n      return new token.Token(token.Type.uint, obj);\n    } else {\n      return new token.Token(token.Type.negint, obj);\n    }\n  },\n  bigint: function bigint(obj, _typ, _options, _refStack) {\n    if (obj >= BigInt(0)) {\n      return new token.Token(token.Type.uint, obj);\n    } else {\n      return new token.Token(token.Type.negint, obj);\n    }\n  },\n  Uint8Array: function Uint8Array(obj, _typ, _options, _refStack) {\n    return new token.Token(token.Type.bytes, obj);\n  },\n  string: function string(obj, _typ, _options, _refStack) {\n    return new token.Token(token.Type.string, obj);\n  },\n  boolean: function boolean(obj, _typ, _options, _refStack) {\n    return obj ? simpleTokens.true : simpleTokens.false;\n  },\n  null: function _null(_obj, _typ, _options, _refStack) {\n    return simpleTokens.null;\n  },\n  undefined: function undefined(_obj, _typ, _options, _refStack) {\n    return simpleTokens.undefined;\n  },\n  ArrayBuffer: function ArrayBuffer(obj, _typ, _options, _refStack) {\n    return new token.Token(token.Type.bytes, new Uint8Array(obj));\n  },\n  DataView: function DataView(obj, _typ, _options, _refStack) {\n    return new token.Token(token.Type.bytes, new Uint8Array(obj.buffer, obj.byteOffset, obj.byteLength));\n  },\n  Array: function Array(obj, _typ, options, refStack) {\n    if (!obj.length) {\n      if (options.addBreakTokens === true) {\n        return [simpleTokens.emptyArray, new token.Token(token.Type.break)];\n      }\n\n      return simpleTokens.emptyArray;\n    }\n\n    refStack = Ref.createCheck(refStack, obj);\n    var entries = [];\n    var i = 0;\n    var _iteratorNormalCompletion = true;\n    var _didIteratorError = false;\n    var _iteratorError = undefined;\n\n    try {\n      for (var _iterator = obj[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n        var e = _step.value;\n        entries[i++] = objectToTokens(e, options, refStack);\n      }\n    } catch (err) {\n      _didIteratorError = true;\n      _iteratorError = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion && _iterator.return != null) {\n          _iterator.return();\n        }\n      } finally {\n        if (_didIteratorError) {\n          throw _iteratorError;\n        }\n      }\n    }\n\n    if (options.addBreakTokens) {\n      return [new token.Token(token.Type.array, obj.length), entries, new token.Token(token.Type.break)];\n    }\n\n    return [new token.Token(token.Type.array, obj.length), entries];\n  },\n  Object: function (_Object) {\n    function Object(_x, _x2, _x3, _x4) {\n      return _Object.apply(this, arguments);\n    }\n\n    Object.toString = function () {\n      return _Object.toString();\n    };\n\n    return Object;\n  }(function (obj, typ, options, refStack) {\n    var isMap = typ !== 'Object';\n    var keys = isMap ? obj.keys() : Object.keys(obj);\n    var length = isMap ? obj.size : keys.length;\n\n    if (!length) {\n      if (options.addBreakTokens === true) {\n        return [simpleTokens.emptyMap, new token.Token(token.Type.break)];\n      }\n\n      return simpleTokens.emptyMap;\n    }\n\n    refStack = Ref.createCheck(refStack, obj);\n    var entries = [];\n    var i = 0;\n    var _iteratorNormalCompletion2 = true;\n    var _didIteratorError2 = false;\n    var _iteratorError2 = undefined;\n\n    try {\n      for (var _iterator2 = keys[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n        var key = _step2.value;\n        entries[i++] = [objectToTokens(key, options, refStack), objectToTokens(isMap ? obj.get(key) : obj[key], options, refStack)];\n      }\n    } catch (err) {\n      _didIteratorError2 = true;\n      _iteratorError2 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n          _iterator2.return();\n        }\n      } finally {\n        if (_didIteratorError2) {\n          throw _iteratorError2;\n        }\n      }\n    }\n\n    sortMapEntries(entries, options);\n\n    if (options.addBreakTokens) {\n      return [new token.Token(token.Type.map, length), entries, new token.Token(token.Type.break)];\n    }\n\n    return [new token.Token(token.Type.map, length), entries];\n  })\n};\ntypeEncoders.Map = typeEncoders.Object;\ntypeEncoders.Buffer = typeEncoders.Uint8Array;\nvar _iteratorNormalCompletion3 = true;\nvar _didIteratorError3 = false;\nvar _iteratorError3 = undefined;\n\ntry {\n  for (var _iterator3 = 'Uint8Clamped Uint16 Uint32 Int8 Int16 Int32 BigUint64 BigInt64 Float32 Float64'.split(' ')[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n    var typ = _step3.value;\n    typeEncoders[\"\".concat(typ, \"Array\")] = typeEncoders.DataView;\n  }\n} catch (err) {\n  _didIteratorError3 = true;\n  _iteratorError3 = err;\n} finally {\n  try {\n    if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n      _iterator3.return();\n    }\n  } finally {\n    if (_didIteratorError3) {\n      throw _iteratorError3;\n    }\n  }\n}\n\nfunction objectToTokens(obj) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  var refStack = arguments.length > 2 ? arguments[2] : undefined;\n  var typ = is.is(obj);\n  var customTypeEncoder = options && options.typeEncoders && options.typeEncoders[typ] || typeEncoders[typ];\n\n  if (typeof customTypeEncoder === 'function') {\n    var tokens = customTypeEncoder(obj, typ, options, refStack);\n\n    if (tokens != null) {\n      return tokens;\n    }\n  }\n\n  var typeEncoder = typeEncoders[typ];\n\n  if (!typeEncoder) {\n    throw new Error(\"\".concat(common.encodeErrPrefix, \" unsupported type: \").concat(typ));\n  }\n\n  return typeEncoder(obj, typ, options, refStack);\n}\n\nfunction sortMapEntries(entries, options) {\n  if (options.mapSorter) {\n    entries.sort(options.mapSorter);\n  }\n}\n\nfunction mapSorter(e1, e2) {\n  var keyToken1 = Array.isArray(e1[0]) ? e1[0][0] : e1[0];\n  var keyToken2 = Array.isArray(e2[0]) ? e2[0][0] : e2[0];\n\n  if (keyToken1.type !== keyToken2.type) {\n    return keyToken1.type.compare(keyToken2.type);\n  }\n\n  var major = keyToken1.type.major;\n  var tcmp = cborEncoders[major].compareTokens(keyToken1, keyToken2);\n\n  if (tcmp === 0) {\n    console.warn('WARNING: complex key types used, CBOR key sorting guarantees are gone');\n  }\n\n  return tcmp;\n}\n\nfunction tokensToEncoded(buf, tokens, encoders, options) {\n  if (Array.isArray(tokens)) {\n    var _iteratorNormalCompletion4 = true;\n    var _didIteratorError4 = false;\n    var _iteratorError4 = undefined;\n\n    try {\n      for (var _iterator4 = tokens[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n        var _token = _step4.value;\n        tokensToEncoded(buf, _token, encoders, options);\n      }\n    } catch (err) {\n      _didIteratorError4 = true;\n      _iteratorError4 = err;\n    } finally {\n      try {\n        if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n          _iterator4.return();\n        }\n      } finally {\n        if (_didIteratorError4) {\n          throw _iteratorError4;\n        }\n      }\n    }\n  } else {\n    encoders[tokens.type.major](buf, tokens, options);\n  }\n}\n\nfunction encodeCustom(data, encoders, options) {\n  var tokens = objectToTokens(data, options);\n\n  if (!Array.isArray(tokens) && options.quickEncodeToken) {\n    var quickBytes = options.quickEncodeToken(tokens);\n\n    if (quickBytes) {\n      return quickBytes;\n    }\n\n    var encoder = encoders[tokens.type.major];\n\n    if (encoder.encodedSize) {\n      var size = encoder.encodedSize(tokens, options);\n\n      var _buf = new bl.Bl(size);\n\n      encoder(_buf, tokens, options);\n\n      if (_buf.chunks.length !== 1) {\n        throw new Error(\"Unexpected error: pre-calculated length for \".concat(tokens, \" was wrong\"));\n      }\n\n      return byteUtils.asU8A(_buf.chunks[0]);\n    }\n  }\n\n  buf.reset();\n  tokensToEncoded(buf, tokens, encoders, options);\n  return buf.toBytes(true);\n}\n\nfunction encode(data, options) {\n  options = Object.assign({}, defaultEncodeOptions, options);\n  return encodeCustom(data, cborEncoders, options);\n}\n\nexports.Ref = Ref;\nexports.encode = encode;\nexports.encodeCustom = encodeCustom;\nexports.makeCborEncoders = makeCborEncoders;\nexports.objectToTokens = objectToTokens;","map":null,"metadata":{},"sourceType":"script"}