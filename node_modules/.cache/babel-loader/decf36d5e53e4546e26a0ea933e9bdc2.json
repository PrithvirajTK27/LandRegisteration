{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\prith\\\\Desktop\\\\New folder (5)\\\\starter_kit-master\\\\LandRegisteration\\\\src\\\\components\\\\Sidebar\\\\Sidebar.js\";\nimport React from \"react\";\nimport { NavLink, Link, useLocation } from \"react-router-dom\"; // nodejs library to set properties for components\n\nimport { PropTypes } from \"prop-types\"; // javascript plugin used to create scrollbars on windows\n\nimport PerfectScrollbar from \"perfect-scrollbar\"; // reactstrap components\n\nimport { Nav, NavLink as ReactstrapNavLink } from \"reactstrap\";\nimport { BackgroundColorContext, backgroundColors } from \"../../contexts/BackgroundColorContext\";\nvar ps;\n\nfunction Sidebar(props) {\n  var location = useLocation();\n  var sidebarRef = React.useRef(null); // verifies if routeName is the one active (in browser input)\n\n  var activeRoute = function activeRoute(routeName) {\n    return location.pathname === routeName ? \"active\" : \"\";\n  };\n\n  React.useEffect(function () {\n    if (navigator.platform.indexOf(\"Win\") > -1) {\n      ps = new PerfectScrollbar(sidebarRef.current, {\n        suppressScrollX: true,\n        suppressScrollY: false\n      });\n    } // Specify how to clean up after this effect:\n\n\n    return function cleanup() {\n      if (navigator.platform.indexOf(\"Win\") > -1) {\n        ps.destroy();\n      }\n    };\n  });\n\n  var linkOnClick = function linkOnClick() {\n    document.documentElement.classList.remove(\"nav-open\");\n  };\n\n  var routes = props.routes,\n      rtlActive = props.rtlActive,\n      logo = props.logo;\n  var logoImg = null;\n  var logoText = null;\n\n  if (logo !== undefined) {\n    if (logo.outterLink !== undefined) {\n      logoImg = React.createElement(\"a\", {\n        href: logo.outterLink,\n        className: \"simple-text logo-mini\",\n        target: \"_blank\",\n        onClick: props.toggleSidebar,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"logo-img\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: logo.imgSrc,\n        alt: \"react-logo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 55\n        },\n        __self: this\n      })));\n      logoText = React.createElement(\"a\", {\n        href: logo.outterLink,\n        className: \"simple-text logo-normal\",\n        target: \"_blank\",\n        onClick: props.toggleSidebar,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60\n        },\n        __self: this\n      }, logo.text);\n    } else {\n      logoImg = React.createElement(Link, {\n        to: logo.innerLink,\n        className: \"simple-text logo-mini\",\n        onClick: props.toggleSidebar,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"logo-img\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 76\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: logo.imgSrc,\n        alt: \"react-logo\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      })));\n      logoText = React.createElement(Link, {\n        to: logo.innerLink,\n        className: \"simple-text logo-normal\",\n        onClick: props.toggleSidebar,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, logo.text);\n    }\n  }\n\n  return React.createElement(BackgroundColorContext.Consumer, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, function (_ref) {\n    var color = _ref.color;\n    return React.createElement(\"div\", {\n      className: \"sidebar\",\n      data: color,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 95\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"sidebar-wrapper\",\n      ref: sidebarRef,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, logoImg !== null || logoText !== null ? React.createElement(\"div\", {\n      className: \"logo\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }) : null, React.createElement(Nav, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, routes.map(function (prop, key) {\n      if (prop.redirect) return null;\n      return React.createElement(\"li\", {\n        className: activeRoute(prop.path) + (prop.pro ? \" active-pro\" : \"\"),\n        key: key,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      }, React.createElement(NavLink, {\n        to: prop.layout + prop.path,\n        className: \"nav-link\",\n        activeClassName: \"active\",\n        onClick: props.toggleSidebar,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, React.createElement(\"i\", {\n        className: prop.icon,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 118\n        },\n        __self: this\n      }), React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 119\n        },\n        __self: this\n      }, rtlActive ? prop.rtlName : prop.name)));\n    }))));\n  });\n}\n\nSidebar.defaultProps = {\n  rtlActive: false,\n  routes: [{}]\n};\nSidebar.propTypes = {\n  // if true, then instead of the routes[i].name, routes[i].rtlName will be rendered\n  // insde the links of this component\n  rtlActive: PropTypes.bool,\n  routes: PropTypes.arrayOf(PropTypes.object),\n  logo: PropTypes.shape({\n    // innerLink is for links that will direct the user within the app\n    // it will be rendered as <Link to=\"...\">...</Link> tag\n    innerLink: PropTypes.string,\n    // outterLink is for links that will direct the user outside the app\n    // it will be rendered as simple <a href=\"...\">...</a> tag\n    outterLink: PropTypes.string,\n    // the text of the logo\n    text: PropTypes.node,\n    // the image src of the logo\n    imgSrc: PropTypes.string\n  })\n};\nexport default Sidebar;","map":{"version":3,"sources":["C:\\Users\\prith\\Desktop\\New folder (5)\\starter_kit-master\\LandRegisteration\\src\\components\\Sidebar\\Sidebar.js"],"names":["React","NavLink","Link","useLocation","PropTypes","PerfectScrollbar","Nav","ReactstrapNavLink","BackgroundColorContext","backgroundColors","ps","Sidebar","props","location","sidebarRef","useRef","activeRoute","routeName","pathname","useEffect","navigator","platform","indexOf","current","suppressScrollX","suppressScrollY","cleanup","destroy","linkOnClick","document","documentElement","classList","remove","routes","rtlActive","logo","logoImg","logoText","undefined","outterLink","toggleSidebar","imgSrc","text","innerLink","color","map","prop","key","redirect","path","pro","layout","icon","rtlName","name","defaultProps","propTypes","bool","arrayOf","object","shape","string","node"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { NavLink, Link, useLocation } from \"react-router-dom\";\n// nodejs library to set properties for components\nimport { PropTypes } from \"prop-types\";\n\n// javascript plugin used to create scrollbars on windows\nimport PerfectScrollbar from \"perfect-scrollbar\";\n\n// reactstrap components\nimport { Nav, NavLink as ReactstrapNavLink } from \"reactstrap\";\nimport {\n  BackgroundColorContext,\n  backgroundColors,\n} from \"../../contexts/BackgroundColorContext\";\n\nvar ps;\n\nfunction Sidebar(props) {\n  const location = useLocation();\n  const sidebarRef = React.useRef(null);\n  // verifies if routeName is the one active (in browser input)\n  const activeRoute = (routeName) => {\n    return location.pathname === routeName ? \"active\" : \"\";\n  };\n  React.useEffect(() => {\n    if (navigator.platform.indexOf(\"Win\") > -1) {\n      ps = new PerfectScrollbar(sidebarRef.current, {\n        suppressScrollX: true,\n        suppressScrollY: false,\n      });\n    }\n    // Specify how to clean up after this effect:\n    return function cleanup() {\n      if (navigator.platform.indexOf(\"Win\") > -1) {\n        ps.destroy();\n      }\n    };\n  });\n  const linkOnClick = () => {\n    document.documentElement.classList.remove(\"nav-open\");\n  };\n  const { routes, rtlActive, logo } = props;\n  let logoImg = null;\n  let logoText = null;\n  if (logo !== undefined) {\n    if (logo.outterLink !== undefined) {\n      logoImg = (\n        <a\n          href={logo.outterLink}\n          className=\"simple-text logo-mini\"\n          target=\"_blank\"\n          onClick={props.toggleSidebar}\n        >\n          <div className=\"logo-img\">\n            <img src={logo.imgSrc} alt=\"react-logo\" />\n          </div>\n        </a>\n      );\n      logoText = (\n        <a\n          href={logo.outterLink}\n          className=\"simple-text logo-normal\"\n          target=\"_blank\"\n          onClick={props.toggleSidebar}\n        >\n          {logo.text}\n        </a>\n      );\n    } else {\n      logoImg = (\n        <Link\n          to={logo.innerLink}\n          className=\"simple-text logo-mini\"\n          onClick={props.toggleSidebar}\n        >\n          <div className=\"logo-img\">\n            <img src={logo.imgSrc} alt=\"react-logo\" />\n          </div>\n        </Link>\n      );\n      logoText = (\n        <Link\n          to={logo.innerLink}\n          className=\"simple-text logo-normal\"\n          onClick={props.toggleSidebar}\n        >\n          {logo.text}\n        </Link>\n      );\n    }\n  }\n  return (\n    <BackgroundColorContext.Consumer>\n      {({ color }) => (\n        <div className=\"sidebar\" data={color}>\n          <div className=\"sidebar-wrapper\" ref={sidebarRef}>\n            {logoImg !== null || logoText !== null ? (\n              <div className=\"logo\">\n                \n              </div>\n            ) : null}\n            <Nav>\n              {routes.map((prop, key) => {\n                if (prop.redirect) return null;\n                return (\n                  <li\n                    className={\n                      activeRoute(prop.path) + (prop.pro ? \" active-pro\" : \"\")\n                    }\n                    key={key}\n                  >\n                    <NavLink\n                      to={prop.layout + prop.path}\n                      className=\"nav-link\"\n                      activeClassName=\"active\"\n                      onClick={props.toggleSidebar}\n                    >\n                      <i className={prop.icon} />\n                      <p>{rtlActive ? prop.rtlName : prop.name}</p>\n                    </NavLink>\n                  </li>\n                );\n              })}\n            \n            </Nav>\n          </div>\n        </div>\n      )}\n    </BackgroundColorContext.Consumer>\n  );\n}\n\nSidebar.defaultProps = {\n  rtlActive: false,\n  routes: [{}],\n};\n\nSidebar.propTypes = {\n  // if true, then instead of the routes[i].name, routes[i].rtlName will be rendered\n  // insde the links of this component\n  rtlActive: PropTypes.bool,\n  routes: PropTypes.arrayOf(PropTypes.object),\n  logo: PropTypes.shape({\n    // innerLink is for links that will direct the user within the app\n    // it will be rendered as <Link to=\"...\">...</Link> tag\n    innerLink: PropTypes.string,\n    // outterLink is for links that will direct the user outside the app\n    // it will be rendered as simple <a href=\"...\">...</a> tag\n    outterLink: PropTypes.string,\n    // the text of the logo\n    text: PropTypes.node,\n    // the image src of the logo\n    imgSrc: PropTypes.string,\n  }),\n};\n\nexport default Sidebar;\n"]},"metadata":{},"sourceType":"module"}