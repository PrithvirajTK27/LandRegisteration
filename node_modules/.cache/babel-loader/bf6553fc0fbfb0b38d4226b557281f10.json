{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar token = require('./token.js');\n\nvar _0uint = require('./0uint.js');\n\nvar common = require('./common.js');\n\nfunction toToken(_data, _pos, prefix, length) {\n  return new token.Token(token.Type.map, length, prefix);\n}\n\nfunction decodeMapCompact(data, pos, minor, _options) {\n  return toToken(data, pos, 1, minor);\n}\n\nfunction decodeMap8(data, pos, _minor, options) {\n  return toToken(data, pos, 2, _0uint.readUint8(data, pos + 1, options));\n}\n\nfunction decodeMap16(data, pos, _minor, options) {\n  return toToken(data, pos, 3, _0uint.readUint16(data, pos + 1, options));\n}\n\nfunction decodeMap32(data, pos, _minor, options) {\n  return toToken(data, pos, 5, _0uint.readUint32(data, pos + 1, options));\n}\n\nfunction decodeMap64(data, pos, _minor, options) {\n  var l = _0uint.readUint64(data, pos + 1, options);\n\n  if (typeof l === 'bigint') {\n    throw new Error(\"\".concat(common.decodeErrPrefix, \" 64-bit integer map lengths not supported\"));\n  }\n\n  return toToken(data, pos, 9, l);\n}\n\nfunction decodeMapIndefinite(data, pos, _minor, options) {\n  if (options.allowIndefinite === false) {\n    throw new Error(\"\".concat(common.decodeErrPrefix, \" indefinite length items not allowed\"));\n  }\n\n  return toToken(data, pos, 1, Infinity);\n}\n\nfunction encodeMap(buf, token$1) {\n  _0uint.encodeUintValue(buf, token.Type.map.majorEncoded, token$1.value);\n}\n\nencodeMap.compareTokens = _0uint.encodeUint.compareTokens;\n\nencodeMap.encodedSize = function encodedSize(token) {\n  return _0uint.encodeUintValue.encodedSize(token.value);\n};\n\nexports.decodeMap16 = decodeMap16;\nexports.decodeMap32 = decodeMap32;\nexports.decodeMap64 = decodeMap64;\nexports.decodeMap8 = decodeMap8;\nexports.decodeMapCompact = decodeMapCompact;\nexports.decodeMapIndefinite = decodeMapIndefinite;\nexports.encodeMap = encodeMap;","map":null,"metadata":{},"sourceType":"script"}